[{"content":"This fall I was asked to officiate the wedding of my sister-in-law Rachel to her fiance Mike. It was a distinct pleasure and the first wedding I\u0026rsquo;ve ever been asked to officiate. My remarks were well received so I wanted to share them here in case they are useful to someone else. There are some minor changes I wrote on my script in the weekend before the wedding, but this is the script I started with.\nRachel and Mike\u0026rsquo;s Wedding Friends and family, we are gathered here on this joyous day to celebrate the love between Mike and Rachel and help them transform that love into a family. I’ve had the pleasure of watching Rachel and Mike meet each other, fall in love and to be here today to help them wed.\nIt is important that we are all gathered together to join in this making of a family. We are here as parents, sisters, extended family and friends new and old. We come together to not only send Mike and Rachel on their journey but the show them that they do not go alone; they start this marriage with all of us supporting them. That they should know that no trouble they face needs to be faced alone.\nIn marriage we commit to facing the good times and the bad together. By being here today all of us lend them our love and support. Because no family is two people alone, it is a community of people united by our love.\nThe poet Edmund O’ Neill wrote:\n Marriage is a commitment to life, the best that two people can find and bring out in each other. It offers opportunities for sharing and growth that no other relationship can equal. It is a physical and an emotional joining that is promised for a lifetime.\nWithin the circle of its love, marriage encompasses all of life’s most important relationships. A wife and a husband are each other’s best friend, confidant, lover, teacher, listener, and critic. And there may come times when one partner is heartbroken or ailing, and the love of the other may resemble the tender caring of a parent for a child.\nMarriage deepens and enriches every facet of life. Happiness is fuller, memories are fresher, commitment is stronger, even anger is felt more strongly, and passes away more quickly.\nMarriage understands and forgives the mistakes life is unable to avoid. It encourages and nurtures new life, new experiences, and new ways of expressing a love that is deeper than life.\nWhen two people pledge their love and care for each other in marriage, they create a spirit unique unto themselves which binds them closer than any spoken or written words. Marriage is a promise, a potential made in the hearts of two people who love each other and takes a lifetime to fulfill.\n I have already seen the two of you two grow your relationship through three truly momentous years of challenges in the world. There is no perfect answer for what makes a lasting and happy marriage. But I’m happy to offer you these seven principles from research done by John M. Gottman, one of the premier researchers on what makes relationships work.\n1. Care deeply about each other\u0026rsquo;s lives. Not just about each other, but the interests, trials and tribulations of your spouse. “From knowledge springs not only love but the fortitude to weather marital storms.”\n2. Invest in your marriage. Tell happy stories of how you met, compliment and appreciate each other. Never stop showing that you care for each other. Each kind word, each happy memory recalled helps to build the sense of love and affection you have for each other.\n3. Turn towards each other instead of away. A full life is full of challenges big and small. In a healthy marriage your partner should be the first person you turn to. This happens not just in big dramatic moments but in a thousand small moments folding laundry, doing the dishes, and walking the dog. We build up our relational bank account with many small deposits, and we draw on that balance when things are harder.\n4. Be Influenced by your spouse. Ask and listen to each other\u0026rsquo;s advice and let it influence you. You are both lucky to be marrying someone so smart. Use that as the great gift that it is. Ask for advice even if your spouse doesn’t know much about the topic. Let them help you think through problems and trust that their advice has your best interests at heart.\n5. Solve your solvable problems. No marriage is free of problems, but good ones learn to be at solving them. Soften your criticism. Repair your relationship when tensions are high. Soothe yourself and your spouse when in conflict. Compromise with each other and find common ground. Above all, be tolerant of each other\u0026rsquo;s faults.\n6. Overcome Gridlock Some problems are harder to solve and feel like you are stuck in gridlock. These challenges are rooted in your biggest dreams for life and your future. So learn your spouse’s biggest and deepest dreams. Cherish them and help them grow.\n7. Create shared meaning in your lives Truly creating a family creates a shared culture just for yourselves. Create traditions, tell stories, tall tails, and find ways of running your life together. These habits are what create a family far more than rings and vows or living in the same home.\nThat said, rings and vows are what we are here for today. This gathering, full of family and friends, on this beautiful day, is the first of many stories to be told and anniversaries to be celebrated.\nVows Now that I have dispensed advice, I invite you to join your hands and your hearts and repeat these vows. Michael repeat after me: I, Mike, take you, Rachel, to be my wife. I promise to be true to you in good times and in bad, in sickness and in health. I will love and honor you all the days of my life.\nRachel repeat after me: I, Rachel, take you, Mike, to be my husband. I promise to be true to you in good times and in bad, in sickness and in health. I will love and honor you all the days of my life.\nRing Exchange May I have the rings please. Mike take Rachel’s hands and repeat after me. I give you this ring as a reminder that I will love, honor, and cherish you, In all times, In all places, And in all ways, forever. With this ring, I marry you and bind my life to yours. It is a symbol of my eternal love, My everlasting friendship, And the promise of all my tomorrows.\nRachel repeat after me. I give you this ring as a reminder that I will love, honor, and cherish you, In all times, In all places, And in all ways, forever. With this ring, I marry you and bind my life to yours. It is a symbol of my eternal love, My everlasting friendship, And the promise of all my tomorrows.\nBy the power of your love and with the witnesses present today, I pronounce you man and wife. You may now kiss!\n","permalink":"https://www.nortrup.dev/posts/an-officiant-s-wedding-script/","summary":"\u003cp\u003eThis fall I was asked to officiate the wedding of my sister-in-law Rachel to her fiance Mike. It was a distinct pleasure and the first wedding I\u0026rsquo;ve ever been asked to officiate. My remarks were well received so I wanted to share them here in case they are useful to someone else. There are some minor changes I wrote on my script in the weekend before the wedding, but this is the script I started with.\u003c/p\u003e","tags":["Wedding"],"title":"An officiant's wedding script"},{"content":"I recently had a conversation with several Product Managers at work who wanted me to step in and set a standard for how and who was responsible for triaging bugs reported to their teams. The question was mostly focused on who inside of the team was responsible. Was that the engineering manager, the PM, the TPM? Between the four folks who came in mass to my office hours, there were five different ways of managing bug triage. This was causing some challenges because there was a RACI being built to set expectations.\nI had a very firm \u0026ldquo;No I won\u0026rsquo;t create this standard for you\u0026rdquo;. And I\u0026rsquo;m here to caution other product leaders and product operations teams not to do it either. When you are operating a dynamic adaptive system with multiple independent teams. It is important to be very thoughtful about where and when you set and enforce standards. Some questions you should ask yourself before establishing a standard that everyone must follow. We should think about standards in systems in and teams as a tool to reduce the Cognitive Load on teams and individuals and make it easier for value to flow through the system. So when we are considering creating a standard we need to think of who and how we will reduce the cognitive load.\n  Book Recommendation: Team Topologies(Affiliate Link)\nDownstream Consumers Is there one or more groups that is consuming the output of this process from multiple teams that depends on having a standardized output. If multiple teams are passing work to a common destination further down the value stream then it makes sense to standardize for the ease of the downstream teams. Cloud infrastructure is an example. Its a reasonable expectation that teams conform to standards to gain access to cloud infrastructure if that supports availability, reporting, alerting and ease of use. This is probably true even when that standardization might cost the team to lose some flexibility in their design.\nEnforcement If something is really going to be a standard someone is going to have to invest in actually enforcing that standard. This is in part credibility issue and also what is the point of creating a standard if you\u0026rsquo;ll let folks keep doing non-standard things. So you have to ask yourself, how will you effectively track and remediate compliance with the standard. If you can\u0026rsquo;t effectively enforce the standard why are you bothering to create it in the first place?\nTeam Flexibility If you have teams that need to form and reform it can be beneficial to have standards that make it easy for everyone to start working together because there is a baseline of how things are done. It is also helpful if you are adding lots of people and scaling rapidly to have a documented standard that they can be trained on\nThe Army has a standardized planning process that is taught from everyone from staff NCOs general officers at every school from when you join to when you retire. This makes it easy for the Army to take almost any group of officers form anywhere in the Army put them in a room and tell them to plan and they know what process to use. That is handy when you make people move every 3 years or when you are in combat.\nReturn on Investment The other thing to consider is if setting a standard will impose more harm than good on the teams that use that standard. In the case I outlined at the top of the article, I had four PMs and five methods of doing triage. I might create a standard that aligns with one or two of those teams. But I would likely interrupt the norms of at least 3 or four teams. And that was just in a subset of my whole org. As an extension, if you have strong norms across the organization that are doing the same thing, there is lest cost to imposing a standard.\nSize of the organization The smaller the team that you are trying to standardize, the easier it is to create a standard. Its really easy and low cost to create standards at the individual team level. It\u0026rsquo;s more expensive to do it for several teams in one coherant portfolio. And the cost continues to go up the higher that we go in the org chart.\nWe want to try and build systems that allow individual teams to be self organizing in their process and find what works for them. Occasionally we will set standards for everyone. But we should do that only when we have compelling reasons.\nAll Together Now Let\u0026rsquo;s review the example we discussed at the top of the post. Should I set a standard on who inside of a team is responsible for leading bug triage?\n1. Downstream standardization: ❌ Downstream consumers probably want to understand what our standards are in JIRA for marking a ticket as triaged, and how long they should expect to wait for something to be triaged. But they mostly don\u0026rsquo;t care who does the triage. 2. Enforcement: ❌ I cannot go to every standup for all of the teams and make sure that they are following a standard for triage. I don\u0026rsquo;t even think that I have a feasible mechanism from observing it externally. So whatever I say the standard is, people will continue to mostly do what they want in their own meetings.\n3. Flexibility: ❌ We have generally long lived teams on long lived projects. Sure there is turn over, but we are not trying to hot swap people on a regular basis.\n4. Return on Investment: ❌ In order to set a standard here I would have to do a lot of work to teach people the new way, it would have upset their flow and patterns. It would be a high cost to get people to use the standard and we would have sacrificed velocity on the way.\n5. Size of the Organization: ❌ The request was to set a standard that would impact every engineering team in the company. That\u0026rsquo;s a very high bar to try and standardize on.\nSo keep your standards as tight as you can. You can be more specific the closer to the action you go, but refrain from getting to prescriptive whenever you can get away with it.\n","permalink":"https://www.nortrup.dev/posts/product-management/keep-your-standards-to-a-minimum/","summary":"\u003cp\u003eI recently had a conversation with several Product Managers  at work who wanted me to step in and set a standard for how and who was responsible for triaging bugs reported to their teams. The question was mostly focused on who inside of the team was responsible. Was that the engineering manager, the PM, the TPM?  Between the four folks who came in mass to my office hours, there were five different ways of managing bug triage.  This was causing some challenges because there was a RACI being built to set expectations.\u003c/p\u003e\n\u003cp\u003eI had a very firm \u0026ldquo;No I won\u0026rsquo;t create this standard for you\u0026rdquo;.  And I\u0026rsquo;m here to caution other product leaders and product operations teams not to do it either.  When you are operating a dynamic adaptive system with multiple independent teams.  It is important to be very thoughtful about where and when you set and enforce standards.  Some questions you should ask yourself before establishing a standard that everyone must follow. \u003c/p\u003e","tags":["Product Operations","Product Management"],"title":"Keep your standards to a minimum"},{"content":"The OODA loop(Observe Orient Decide Act) is a concept originally coming out of the Air Force for pilots conducting air to air combat. It\u0026rsquo;s now applied to many different systems thinking and design contexts. This week I was preparing to explain Product Operations to my new CEO and it occured to me that the role of Product Ops is to help power and accelerate the OODA loop for product management teams.\nObserve:  Accelerate the number and speed at which we can collect feedback on customer behavior. Customer feedback, interviews, notes from sales and support. Improve the analytics data that PMs have to make decisions with. Create tools that radiate information on priorities.   Orient:  Facilitate the OKR planning and tracking.  Create tools and systems that help PMs prioritize.  Decide:  Run the Quarterly / Semi-Annual planning process.  Build decision support tools  Help publish real time roadmaps that communicate decisions.  Act:  Enable communication between PM and engineering  Help keep status up todate Help decrease cycle time for build, test, deploy, and release Drive the results of action back into the feedback loop  In air combat success is getting inside your opponents OODA low and making decisions faster. That means not just deciding what should be done but being able to out maneuver and shoot down the other aircraft. In product management we want to be able to make better decisions on how to improve our product faster than our competitors then actually be able build and release those products. If we can do that we can out maneuver or competitors.\n","permalink":"https://www.nortrup.dev/posts/product-management/product-operations-feeds-the-ooda-loop/","summary":"The OODA loop(Observe Orient Decide Act) is a concept originally coming out of the Air Force for pilots conducting air to air combat. It\u0026rsquo;s now applied to many different systems thinking and design contexts. This week I was preparing to explain Product Operations to my new CEO and it occured to me that the role of Product Ops is to help power and accelerate the OODA loop for product management teams.","tags":["Product Operations","Product Management"],"title":"Product Operations feeds the OODA loop"},{"content":"The Fediverse is great, I love it, but as I see more and more projects to spring up to replace different private social media operations. First it was Twitter, now Reddit is seeing an exodus to Lemmy, there is also Pixelfed to replace instagram and bookwyrm to replace Goodreads.\nIt\u0026rsquo;s great. But it isn\u0026rsquo;t without its problems.\nNo consistent Identity We don\u0026rsquo;t have a clear identity federation system. I came across Keyoxide which seems like a great way to start gluing your identities together, but is not yet user friendly. As a result I have an ID on three different fediverse services and I can only sort of glue them together with profile links.\nCommunity Admins and Moderators We are very dependent on having groups of mostly volunteers to keep our instances and communities up and running. I\u0026rsquo;m personally using an instance a former co-worker runs. He does this because he finds it fun, but if he were to decide that it\u0026rsquo;s no longer fun, then my instance could go away with little to no notice. We\u0026rsquo;ve seen this happen several times to large instances where several thousands of users were displaced with a few weeks notice.\nThis shouldn\u0026rsquo;t be surprising, to host a social media community you have to perform DevOps to keep the computers working. You have to deal with content moderation, which is a loosing game; it cannot be won. You also have to deal with trust and safety issues. How long would you keep doing something for no money after you got a few moderation reports for Child Sexual Abuse Material (CSAM)? I personally would not put up with it for long.\nSolid Pods at the center of it all I think there is a better solution close at hand. I\u0026rsquo;ve been watching the Solid Project for years and this feels like it should be it\u0026rsquo;s moment. Rather than joining an instances of a particular project I should be able to have my own Pod with all of my data stored in it.\nThen each project I want to use all the project needs to do is provide a front end over my data. I can have one identity for PixelFed when I want to look at and post pictures of my trees, I can log into Elk when I want to read a feed of microblogs. I can go to Lemmy when I want to get questions answered.\nElk is actually a great example of what should be possible. The Elk front end is my favorite UI for Mastodon, and it stores effectively no data about me. It talks to my instance and it displays the data. Instead it should be able to talk to my pod and project my data. My pod serving as a single instance for multiple different lenses of the same data.\nI suspect there are thorny problems in here with caching and distribution to many many more single instances. But maybe that is something that a good Pod provider can help solve at scale?\nBut the escape from corporate social media has taught us that we need to own our own data. But changing from having a big central company holding your data to some nice person holding your data is a step in the right direction but not the destination. We need to own our data.\n","permalink":"https://www.nortrup.dev/posts/technology/2023-06-14-solid-pod-fediverse/","summary":"The Fediverse is great, I love it, but as I see more and more projects to spring up to replace different private social media operations. First it was Twitter, now Reddit is seeing an exodus to Lemmy, there is also Pixelfed to replace instagram and bookwyrm to replace Goodreads.\nIt\u0026rsquo;s great. But it isn\u0026rsquo;t without its problems.\nNo consistent Identity We don\u0026rsquo;t have a clear identity federation system. I came across Keyoxide which seems like a great way to start gluing your identities together, but is not yet user friendly.","tags":["Fediverse","Solid"],"title":"A Solid Fediverse"},{"content":"I\u0026rsquo;ve stayed on the sidelines of much of the LLM debate, but I\u0026rsquo;m willing to stake out my skepticism on this \u0026ldquo;world changing\u0026rdquo; technology. As I think back over the arch of my online life, I see these foundational models as the latest in a series of events where amazing technology was going to change the world. But each time individual value is diluted for corporate money grabs.\nGoing way back in time, my first real formative experience on the internet was Geocities. When a friend showed me that I could write an HTML file and make it show up on the internet I was hooked. It was magic to me that I could make something the whole world could see. I quickly fell down the rabbit hole of how to make these sites.\nMy site was entirely unimpressive and probably had terrible design. Sadly, or maybe for the better, it doesn\u0026rsquo;t exist anymore. I made my first money on the internet with that site. I hosted ads for a career site and manged to make something like $87. The \u0026ldquo;neighborhoods\u0026rdquo; that GeoCities fostered around topics were real, I joined mine and became a \u0026ldquo;Community Leader\u0026rdquo; and learned some more about building websites. Eventually I taught some folks how to write HTML. It was great.\nThen Yahoo decided to buy Geocities. With the purchase came terms of service that appeared to give Yahoo rights over user content. They later revised their terms of service, but the damage was done. People fled the site, the neighborhood structure was dissolved and communities disbanded. Users were prohibited from hosting their own ads.\nRather famously the acquisition didn\u0026rsquo;t work out and GeoCities was quietly closed. This was my first brush with my content and presence online being a chip in corporate money making plans. Then there was the dot com crash in the early 2000s. GeoCities probably was born and was an early casualty of that first tech exuberance.\nNext came social media. First was MySpace (which I didn\u0026rsquo;t really use), but more famously came Facebook. Landing at RIT during my freshman year it seemed like a great way to get to know folks and build communities. It was contained, and you could only use it to see other people at your school, you could find people in your classes and dorms and clubs.\nOver time, you got to keep your account as you left school, then you could talk to people at other schools. It was genuinely useful as I left collage and joined the Army. I could stay in touch with friends from high school and collage while I was a world away in Iraq for 14 long months. Facebook was an invaluable tool to stay connected to home, and friends. To stay sane a world away in a combat zone.\nYes there were some challenges with the site, I probably should have been more concerned about privacy earlier. I certainly knew they were selling me ads, but that seemed like a fair trade for the utility.\nOver time, as we all put in more and more data that contract wore thin. The breaking point for me was when they seemed to allow my data to be used to break democracy and quite honestly my country. I know that in retrospect the Cambridge Analytics data probably didn\u0026rsquo;t have a serious effect on the election, but the contract had changed. It was no longer on even trade with Facebook. My relationships and conversations would be leveraged to sell more ads at higher prices in more markets.\nI was no longer a customer, I was the inventory.\nNext came crypto. What a freaking mess that is. Literal world burning shitshow. Maybe you can tell this one makes me angry.\nGrowing out of understandable distrust of the financial system post 2008 financial crisis, crypto bros (yes mostly bros) have promised that they would forge a new social contract where users could put their information beyond the reach of censorship and make money too!\nUnfortunately it turned out that a huge amount of crypto is outright scams and the part that weren\u0026rsquo;t scams were used to facilitate terrorism, cybercrime, extortion, murder for hire, and finance North Korea\u0026rsquo;s nuclear weapons and ICBM program. All while sucking up energy in a way that made it materially harder to prevent the worst effects of climate change.\nIn the meantime regular people were conned into putting their life-savings into a system that speed ran every financial crime in 100 years in a span of a decade. If you don\u0026rsquo;t believe me read Web3 is Going Just Great.\nAnd now we\u0026rsquo;ve arrived at Large Language Models or Foundational Models if we want to also look at the image generating versions.\nOnce again we are promised that this new technology will bring about a revolution in personal expression and business efficiency. These models will write copy for us, write code for us and give lost kittens home. We are once again promised Care Bears and cupcakes if we just embrace this technology.\nBut I don\u0026rsquo;t plan to be fooled again. The premise of these models is that you will need to feed it all of your data to a cooperation that will use your data to build bigger and more elaborate models to produce more and more convincing bullshit. All while continuing to spend extraordinary amounts of compute power.\nThe thing I find most frustrating is that they are intent to suck up the whole of the internet. Even if you have walked the indiweb path and hosted your own bespoke handcrafted HTML website for years, a foundational model will crawl your data and regurgitate your content. No questions, no compensation, just your content for corporate gain.\nIt\u0026rsquo;s even worse if you have been taking part in social communities hosted by companies. Then you will be cashed in twice. Your host will sell your data to a LLM who will then sell their model to a different company as a product.\n Reddit has changed their API terms to make it easier to sell your communities content to a LLM. GitHub repurposed all the open source content they had on their site to train Copilot, which they will sell to companies and individuals to allow them to code faster based on all of your hard work. Stack Overflow has decided to take all the questions and answers on their site, start training LLMs with them and then sell that to their corporate customers. So decades of community contributions given under a creative commons license will now benefit SO and their corporate customers. As the Washington Post helped highlight in this post the LLM data sets also include anything they can hoover up off of the internet. So right now the contents of this page could be consumed into these models, helping them write blog posts in the style of Andy Nortrup.  Maybe I\u0026rsquo;m now old enough to be a curmudgeon about all of these new toys and the way things used to be. But my experience in consumer tech over the last three-ish decades has been that each of these revolutions has been that each one finds ways to privatize the commons to enrich the folks who could grab the data.\nOnce again, I feel like my data, my writing, my questions and curiosity are being turned into inventory for OpenAI / Microsoft, Google and Facebook to write a bot that sounds like I should trust it.\nThe outcomes are already obvious and pointed out by folks far smarter than me. Regulators in Europe and in the United States are starting to respond.\n How are these models cleaning the data from private data? Do EU citizens have a right to have their data expunged from the training data as allowed by the GDPR? Who is at fault when a model slanders or libels someone in the output? How is this going to supercharge misinformation, spam, and phishing? I can\u0026rsquo;t wait for a deep faked video call to my grandmother using a script based on all of my writing bilks her out of her life savings to funnel cryptocurrency to some neo-fascist politician.  I\u0026rsquo;m just tired of being lead to the slaughter once again.\n","permalink":"https://www.nortrup.dev/posts/technology/llm-skepticism/","summary":"I\u0026rsquo;ve stayed on the sidelines of much of the LLM debate, but I\u0026rsquo;m willing to stake out my skepticism on this \u0026ldquo;world changing\u0026rdquo; technology. As I think back over the arch of my online life, I see these foundational models as the latest in a series of events where amazing technology was going to change the world. But each time individual value is diluted for corporate money grabs.\nGoing way back in time, my first real formative experience on the internet was Geocities.","tags":["Technology","LLMs","AI"],"title":"LLMs - I won't be fooled again"},{"content":"Working with some colleagues recently I was asked \u0026ldquo;Why aren\u0026rsquo;t we doing all the things to really be [desired state], we should pause and think about how we really want to restructure the company and the way we build software to do it right.\u0026rdquo;\nMy colleague has a great instinct and she isn\u0026rsquo;t wrong in seeing the gaps that we have in the product and how we produce software. But I think that its important to apply systems thinking to solving these problems. That requires us to understand where we can apply leverage to change the balancing feedback loops that are enabling and constraining our products.\nLets say that you are trying to migrate a software product from an on-prem focused delivery to cloud first. I had a hand in this both at Splunk and at Tanium so I\u0026rsquo;m familiar with at least some patterns in this space.   A balancing feedback loop consists of a current state, a desired state and flows that enable or limit the state change. In software their are many flows that divert people away from buying your software. It might cost to much, not solve their problems, be worse than a competitor, or not of sufficient quality. In the context of a cloud migration, your most likely causes of customers not migrating into your cloud offering are capability gaps that either prevent your customers from adopting or your business from selling to them.\n You can\u0026rsquo;t talk to their on-prem data You don\u0026rsquo;t give customers the same administrative rights they have on-prem You don\u0026rsquo;t have certifications required (FedRAMP, SOC2, ISO, etc) Architectural decisions on-prem make it expensive to operate Operating costs make your price for cloud to high for customers etc     I think what my colleague is looking at is that we need to remove those balances on our conversion system, with a particular eye on how important our technical infrastructure is implemented. Unfortunately we cannot eat the elephant all at once. If we dig in and start doing our homework as product managers we see that there aren\u0026rsquo;t two balancing forces, there are dozens of smaller forces that we have to solve for more tactically. Picking the ones with the highest impact and the highest leverage as we go.\n  As we start to talk to more customers and operate the service with more customers we are going to be able to start to weight these priorities by their level of impact on our ability to convert. We might start by identifying that a particular administrative surface that we took away in cloud needs to be restored to unlock many potential conversions. So that becomes our number one priority.\n  Once we work diligently to solve that problem the system will evolve. Now that we have all of these new customers we realize that all of these customers have pushed up our operational costs, and we are losing our shirt on storage costs on our compute instances. So now we need to prioritize an improvement to our storage architecture that will allow us to have a responsible business model before we can go after the SOC2 attestation that will let us get even more customers (who would make the storage problem even worse).\n  So not only can we not solve all the problems at once, the very act of solving the problems will change the very problems themselves. As we add new customers our audience changes and has different expectations, the costs of delivering the service changes. Process that worked for operations when we had 100 medium sized businesses doesn\u0026rsquo;t work anymore when you have 1000 medium sized businesses and 100 large enterprises. This can feel like you are just drifting from crisis to crisis and not building it right the first time. But in complex adaptive systems we the impact of the changes is mostly unknowable. So we can focus on the problems that are in front of us and adapt as we learn new things. As we change the system the strength of the flows will change and we will adjust our roadmap and plans appropriately.\n","permalink":"https://www.nortrup.dev/posts/product-management/balancing-feedback-loops-in-product/","summary":"\u003cp\u003eWorking with some colleagues recently I was asked \u0026ldquo;Why aren\u0026rsquo;t we doing all the things to really be [desired state], we should pause and think about how we really want to restructure the company and the way we build software to do it right.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eMy colleague has a great instinct and she isn\u0026rsquo;t wrong in seeing the gaps that we have in the product and how we produce software.  But I think that its important to apply systems thinking to solving these problems.  That requires us to understand where we can apply leverage to change the balancing feedback loops that are enabling and constraining our products.\u003c/p\u003e","tags":["Product Management","Systems Thinking"],"title":"Balancing Feedback Loops in Product"},{"content":"I\u0026rsquo;ve been working with Productboard a lot in the past few months. Purchasing and helping Tanium implement it has been one of my primary tools to help improve our prioritization, process, and transparency with the rest of the organization.\nOne of my favorite things about Productboard is the ability to super easily document what fields are and how they are supposed to be used immediately inside of the product. I use this all the time to both make my life easier as the person building systems, and it lowers the adoption curve quite a bit for my users. It also feels like a good example of your process being open source. Where it is clear it is easy update your process documentation.\nI use this in two ways. First is to help simplify instructions when I need someone to set or update a status or informational field. Second, I can use it to keep a running history of why the field exists and what expectations we have around it.\nIn the first case I take advantage of the fact that Productboard will give you a link directly to a feature view with a field description panel open, you can send someone a link that says \u0026ldquo;I need you to update this field [link]\u0026rdquo;. And the link brings them exactly the view I care about and a description on how to fill out the field.\nIn the second case I utilize templates that remind me to keep a changelog in the field description of why the field was created and any significant changes in how we use the field. I find that having good templates really helps the whole process along because it makes it faster to write good docs.\nFor example, my template for a status field looks something like the below. Keys to success here.\n Clear sections and prompts to myself on what I want to capture when creating a new field. I have blocked out the different states so that I can easily write what they are and think about if we need all of them. My template for drivers is similarly outlined with the different score options (⬜⬜⬜⬜🟦).  ## Description\nWhy does this field exist, who looks at it, who gets value from the information that we are capturing here. 🔘Not Needed -🔵 Planned -🟡 In Progress -🔴Blocked -🟢Complete -\n## Chaneglog\n* \u0026lt;\u0026lt;Date\u0026gt;\u0026gt; - When was this created, who asked for it. What were we trying to accomplish at the time it was created.\n","permalink":"https://www.nortrup.dev/posts/product-management/productboard-field-descriptions-and-process-documentation/","summary":"\u003cp\u003eI\u0026rsquo;ve been working with Productboard a lot in the past few months. Purchasing and helping Tanium implement it has been one of my primary tools to help improve our prioritization, process, and transparency with the rest of the organization.\u003c/p\u003e\n\u003cp\u003eOne of my favorite things about Productboard is the ability to super easily document what fields are and how they are supposed to be used immediately inside of the product. I use this all the time to both make my life easier as the person building systems, and it lowers the adoption curve quite a bit for my users. It also feels like a good example of your \u003ca href=\"https://www.rubick.com/engineering-handbook/\"\u003eprocess being open source.\u003c/a\u003e Where it is clear it is easy update your process documentation.\u003c/p\u003e","tags":["Product Operations","Productboard",""],"title":"Productboard Field Descriptions and Process Documentation"},{"content":"It\u0026rsquo;s early spring here in the Seattle area that means its time to get into my very modest garden and start going any repotting that needs doing. We had a very warm early February, followed by a a cold spell in the second half of the month. Which meant that all the trees woke up, and then had to be shuffled in and out of my workshop. But when the trees start to wake up you have to do the work of repotting them before you miss the window. The first tree to wake up is my Start Magnolia which is a very early spring bloomer.\n  Star Magnolia before repotting   This year I\u0026rsquo;m moving the tree into a mica training pot to continue developing the structure and start some refinement. I\u0026rsquo;m also curious if I can get some leaf size reduction in a more constrained environment. It spent all of last year in a root builder pot to help develop the root structure after growing up in a nursery can.   Raking out the rootsRaking out the roots\n  After that it got settled into the pot. I\u0026rsquo;m opting for \u0026ldquo;John\u0026rsquo;s Mix\u0026rdquo; soil from Heartswood Bonsai here in Seattle. Lava, Pumice, and Bark Fines. I\u0026rsquo;m still not sure what to think of Akadama, but it\u0026rsquo;s more expensive and my trees aren\u0026rsquo;t fancy.\n  Into a pot it went.A tree in a pot.\n  Now we wait, to see if I killed it in the process. Flower buds continue to swell and the flowers are starting to come out. I also went out to the moss farm that is my back yard and added a nice green carpet of moss to the soil.\nLater this summer I want to reduce the secondary trunk to a lower branch, marked in red. I think having one dominant trunk will help to make the tree more dynamic and the crown a little less cluttered.\nAfter the flowers bloom out, I\u0026rsquo;m going to cut back the branches on top very hard. Probably reducing everything to 2 leaf nodes. This will help get the lower branches marked in green get more sun and more development.\n  Future plans for the tree.Cut at the red line and let it grow strong in the green branches.\n  Now for some waiting for it to bloom and hope that I get to see it this year. Last year I went away on spring break with my family and missed most of the bloom. So I\u0026rsquo;d appreciate it if the tree would bloom in the next three weeks, or five weeks from now. I\u0026rsquo;m also going to make an effort to rotate trees on my bench more often this summer. I can tell that this tree got more sun on the backside because all of the flower buds this year are on the back side of the tree.\n","permalink":"https://www.nortrup.dev/posts/bonsai/star-magnolia/star-magnolia-spring-2023-update/","summary":"It\u0026rsquo;s early spring here in the Seattle area that means its time to get into my very modest garden and start going any repotting that needs doing. We had a very warm early February, followed by a a cold spell in the second half of the month. Which meant that all the trees woke up, and then had to be shuffled in and out of my workshop. But when the trees start to wake up you have to do the work of repotting them before you miss the window.","tags":["Bonsai","Star Magnolia","Repotting"],"title":"Star Magnolia - Spring 2023 Update"},{"content":"I\u0026rsquo;m in the midst of reading Thinking in Systems: A Primer(affiliate link) to my list of recommended reads for Product Managers. It is one of those books like Principals of Product Development Flowthat show you why things work at a deeper systemic level that you\u0026rsquo;ve just been emersed in. It\u0026rsquo;s a book that points out the water for the fishes. I had a moment of illumination when reading her description of the reinforcing and balancing feedback loops that drive physical systems. That while we do not always deal with physical systems, many of the same constraints are in effect for software product management.\n  Two Stock SystemsThinking in Systems; Donnella Medows\n  In the book she explains the way that systems behave. Each with stocks (boxes), processes (water taps), and balancing and reinforcing feedback loops (arrow flows). In the book she uses many examples from the physical world an example of oil and gas extraction, which has strong limits on the amount of the actual resource available.   Two Stock System Diagram   Maybe you look at this and don\u0026rsquo;t see software but in product development we are subject to these reinforcing and balancing loops which both drive and constrain how fast we can iterate and build.  Our resource is our total addressable market of customers there are hard limits to the total number of people that want to buy your product and the number of dollars that you can get them to give you. Extraction is the process of selling them our product.  Yield per unit capital is the cost of acquisition for your customers. This gets more expensive as you move from your first perfect customer into more diverse adjacent users.  Capital is the value that we have to sell to customers. In software this is the product or service that we can sell to customers.  Investment this is where the magic of product and engineering happens. We convert money and time into capital.  Deprecation is the process by which our software goes out of date as soon as we build it. Bugs are found, packages need updating, integrations need to be maintained. The more software we have the more of the balancing function of deprecation acts on our software, the slower we end up going. ​​​​​​Profit is profit, the more of it we reinvest back into our investment, the stronger the reinforcing feedback loop is. The more we divert to extraction, the slower our investment goes.   Obviously, this is a gross simplification of the product development system, but that is what models are for, helping us see part of the world in a comprehensible way.\nAlso, worth reading from Donella Meadows:\n Dancing with Systems How Complex Systems Fail  ","permalink":"https://www.nortrup.dev/posts/product-management/system-of-product/the-product-management-system/","summary":"I\u0026rsquo;m in the midst of reading Thinking in Systems: A Primer(affiliate link) to my list of recommended reads for Product Managers. It is one of those books like Principals of Product Development Flowthat show you why things work at a deeper systemic level that you\u0026rsquo;ve just been emersed in. It\u0026rsquo;s a book that points out the water for the fishes. I had a moment of illumination when reading her description of the reinforcing and balancing feedback loops that drive physical systems.","tags":["Product Management","Product Operations","Systems"],"title":"The Product Management System"},{"content":"I did a fun bit of Hugo templating today that seemed worth sharing. I was previously generating my list of hashtags to apply to a social post inside of my Zapier workflow. I\u0026rsquo;d pull the list of tags then manipulate them into a single string and add the # symbol.\nToday I realized that this would be much simpler to do in Hugo as part of my JSON output. It came out like this:\n\u0026#34;hashtags\u0026#34; (delimit (apply (apply .Params.tags \u0026#34;replaceRE\u0026#34; \u0026#34;\\\\s\u0026#34; \u0026#34;\u0026#34; \u0026#34;.\u0026#34;) \u0026#34;print\u0026#34; \u0026#34;#\u0026#34; \u0026#34;.\u0026#34;) \u0026#34; \u0026#34;) Two apply statements might be overkill, but it works. I needed to do three things:\n Remove the spaces Add a # symbol in front of each tag Converts the list to a single string that I can just plop into a post  Now I have one field that I can put into a post. I find that zero code workflows are best when simplest. Doing variable manipulation with them is never elegant.\n","permalink":"https://www.nortrup.dev/posts/technology/hashtag-strings-in-hugo/","summary":"I did a fun bit of Hugo templating today that seemed worth sharing. I was previously generating my list of hashtags to apply to a social post inside of my Zapier workflow. I\u0026rsquo;d pull the list of tags then manipulate them into a single string and add the # symbol.\nToday I realized that this would be much simpler to do in Hugo as part of my JSON output. It came out like this:","tags":["Technology","Hugo"],"title":"Hashtag strings in Hugo"},{"content":"Jeff Gothelf has a great post that brings together Product Managemet and my preferred philosophy, Stoicism.\n Understanding our customers’ users is key to building products they’ll both love. Measuring your success based on your customers’ behavior is the only way for you to know for sure whether or not you’re delivering value and solving a real problem for them. Any user behaviors that are one step removed from your direct influence pose a risk to your key results.\n He doesn\u0026rsquo;t say stoic anywhere in the post but the core value is there. Stoics teach that you can find happiness by learning to not worry about things outside of your immediate control. In this case your customers customers are out of your control, and you shouldn\u0026rsquo;t set goals based on their behavior.\nLeft unsaid, you also should be careful setting goals based on what sales and support are doing. You can\u0026rsquo;t control if your sales people pitch well or get the pipeline they need from marketing.\n","permalink":"https://www.nortrup.dev/posts/product-management/stoic-objectives/","summary":"Jeff Gothelf has a great post that brings together Product Managemet and my preferred philosophy, Stoicism.\n Understanding our customers’ users is key to building products they’ll both love. Measuring your success based on your customers’ behavior is the only way for you to know for sure whether or not you’re delivering value and solving a real problem for them. Any user behaviors that are one step removed from your direct influence pose a risk to your key results.","tags":["product-management","stoicism","okr"],"title":"Stoic Objectives"},{"content":"A quick roundup of the things I\u0026rsquo;ve been reading and enjoying this week\nFrom Outputs to Outcomes: Bridging the Four Gaps Itamar Gilad\n Start using outcome goals right now where you can. For example if the mindset is ripe in some parts of the company, say certain product teams, start there. If you don’t have the infrastructure to run A/B experiments, start discovering your product using surveys, customer interviews, and fake door tests. Don’t wait for some “big-fix” that will take ages and may not really fix anything.\n The Product Strategy Stack Reforge: Ravi Mehta and Zainab Ghadiyali\n Over time, a poorly defined strategy weighs heavily on a strong team. The lack of clarity makes a team\u0026rsquo;s work burdensome. They may lose pride in shipping a product that feels unfocused, or feel defeated as diminishing returns set in. They may feel they are not getting the context and resources they need from leadership. Eventually, high performers will churn if they don\u0026rsquo;t believe in or can\u0026rsquo;t understand the strategy.\n Product Operations - Where to Begin The Product Heart - Christine Itwaru\n All of the above leads me to the first rule of Product Ops. Establish trust. We felt the trust being built with both customer sets through this first move. I can’t stress how critical this is for Product Ops. This is a highly cross-functional role where you are in the center of so much. Establishing trust is non-negotiable.\n Understanding the role of product ops. Lenny\u0026rsquo;s Podcast\nI ended up on this post after hearing this great episode Christine on Lenny\u0026rsquo;s Podcast on Product Operations.\n I\u0026rsquo;ve had many ways of describing this in the past and it generally centered around the ladder of what I\u0026rsquo;m going to tell you or the second part of this, but I\u0026rsquo;m breaking it down now into two simple things. One is it is a thing you do. Product operations for a VP or a head of product or a product manager is the creation of some system that allows you to thrive or allows your team to thrive in product management. The second is what we\u0026rsquo;ve seen more of over the last couple years, and it\u0026rsquo;s the more common definition.\nThe emergence of the role itself is why it\u0026rsquo;s so common. It\u0026rsquo;s a person or the people, the group of individuals who are strong partners to the product manager and then for more mature product ops teams end up people being more strategic advisors to the head of products. So, your CPO or your VP again. When it comes to data, qualitative, quantitative, anything that they feel can help the CPO or the head of product make more strategic decisions and well-informed decisions.\n ","permalink":"https://www.nortrup.dev/posts/link-roundup/2023-02-25-link-roundup/","summary":"A quick roundup of the things I\u0026rsquo;ve been reading and enjoying this week\nFrom Outputs to Outcomes: Bridging the Four Gaps Itamar Gilad\n Start using outcome goals right now where you can. For example if the mindset is ripe in some parts of the company, say certain product teams, start there. If you don’t have the infrastructure to run A/B experiments, start discovering your product using surveys, customer interviews, and fake door tests.","tags":["ProductOps","ProductOperations","ProductManagement","OKR"],"title":"Link Roundup 2023-02-25"},{"content":"I\u0026rsquo;ve been experimenting with the Fediverse / Mastadon and I really like it. I\u0026rsquo;ve been on my friend\u0026rsquo;s Seattle locals instance that he runs as a hobby. I sort of want to run my own instance, but I don\u0026rsquo;t want to think about any of the server operations. I want a hosting provider and I want it t to make it easy.\nContent moderation is the problem Content moderation is the biggest problem in Social Media, particularly scaled social media. Facebook makes more content moderation decisions every hour than the entire U.S. Justice system has made in it\u0026rsquo;s entire existence. Some of those are really thorny issues that don\u0026rsquo;t have a single solution. And there are some very serious problems with serious legal implications.\nThese content problems fall into two big buckets. Stuff that people go to court or jail for and problems that just make people mad at each other. The former includes Child Sexual Abuse Material (CSAM), copyright infringement, threats of violence and harassment. The later includes the more mundane but also thorny issues of people saying things that other people don\u0026rsquo;t like, which get reported and someone needs to decide on.\nIf we look at big social media, they have been better and worse about the first class. They staff trust and safety teams that work on abuse and CSAM. Maybe they should work more, but their has been a lot of good work with various governments to be able to easily report CSAM when it gets found. They are less good on abuse, but efforts are made. Much of this work is done on the backs of low paid contractors who have to wade through the muck of humanity and suffer terribly for their labors.\nThe second class of content is just straight unsolvable. If you\u0026rsquo;ve watched the GOP try to drag social media execs through clown show hearings to complain about moderation decisions and how conservatives are treated unfairly in social media, you can see the problem.\nSolutions I think that the Fediverse if operated well can have a better structure for managing those problems. In my mind most of this runs through distributing content moderation decisions into smaller instances and creating social pressures for better behavior.\nI\u0026rsquo;d love to see a Fediverse hosting company that does the following:\nNon technical Makes it easy for an individual to create a new instance for themselves and their communities without having to speak any geek. If you mention server specs you have made it to hard.\nCaped, invite only communities Caps instance size and enforce invite only communities. Keep communities in the 150 to 250 member range. This isn\u0026rsquo;t about managing the technical cost of the instance operation but keeping the community small enough that it can be managed by humans on a part time basis. If you have to extend an invitation to my personal community, you\u0026rsquo;ll be have like you are at a social club meeting rather than like you are at a bar.\n  Dunbar\u0026rsquo;s Number (Wikipedia)\n  As content moderation reports come it should also be easier to make decisions because a small community will have a clearer sense of cohesion and social norms. You\u0026rsquo;ll know the person who has been reported or the person who invited them and be able to have a conversation about what has happened and what is OK in your community. You can:\n Decide to censure the author of the offending post Decide to block or mute reporter for malicious reports Choose to defederate instances.  Support for the go to jail problems The hosting provider should do some of the admin lift for you. Things like scan images for known CSAM with from NCMEC and have a team and process to automatically report and handle reports of CSAM on your server. They should help handle things like DMCA takedown requests. Also, you should maybe have some support line for moderation decisions.\nIf we want folks to have their own communities they should feel safe that they aren\u0026rsquo;t going to have someone in their community that makes them unsafe, creates legal liability, or could land them in jail.\nOut of the box block lists Instance admins and mods should be able to subscribe to a continuously updated block list. Keeping continuous track of which hosts need to be defederated and blocked because they are hives of scum and villainy shouldn\u0026rsquo;t be required to have a Pixelfed instance to share pictures with your Bonsai club, or share toots of dad jokes with your friends.\nEnforce that moderation happens If you are going to run an instance you need to have someone doing moderation. If your instance receives moderation requests and doesn\u0026rsquo;t handle them in a timely manner, then there should be consequences. Those can ramp up from a warning, to forced isolation of the instance, to loss of service.\nAlso if an instance is a continued source of malicious activity, if you are getting aggressively defederated for being a haven for bad actors. No amount of \u0026ldquo;processing\u0026rdquo; your moderation queue and saying LGTM should be OK. This protects both the larger fediverse and the hosting provider.\nEffective Operation There is lots of space for an effective hosting platform to make use of shared resources that make the Fediverse more efficient. This can all be on the backend, no one has to see what is going on. But some amount of database clustering, auto scaling, resource multi-tenancy will go a long way. I say this mostly from my experience helping two B2B SaaS companies move from single tenancy to multi-tenancy models. It a hugely important step for resource management and reliability. It is probably some level of forking away from the main branches of Mastodon.\nEarly discovery Starting on Mastodon is easier if you can jump to the local timeline and start to find some things to discover. If you are in an instance all by yourself it would be really quiet. If you want folks to be successful, you are going to need to give them some starter material so they can find someone to follow.\n","permalink":"https://www.nortrup.dev/posts/technology/2023-02-10-mastodon-hosting-wishlist/","summary":"I\u0026rsquo;ve been experimenting with the Fediverse / Mastadon and I really like it. I\u0026rsquo;ve been on my friend\u0026rsquo;s Seattle locals instance that he runs as a hobby. I sort of want to run my own instance, but I don\u0026rsquo;t want to think about any of the server operations. I want a hosting provider and I want it t to make it easy.\nContent moderation is the problem Content moderation is the biggest problem in Social Media, particularly scaled social media.","tags":["Fediverse","Mastodon"],"title":"Fediverse Hosting Wishlist"},{"content":"I think my core challenge with Product Ops, particularly standing it up from scratch, is the tension for modeling systems and processes as they are now vs how I want them to be. Paired with the tension between how much we need to change and how fast the organization is able to absorb change.\nEspecially as the guardian and manager of the product tool stack. I know that if I set up the tools the way we work now, then everyone will continue the way we are now. If I configure tools how I want us to operate the lift to get everyone using it is harder. If it\u0026rsquo;s hard you have the potential to get people diverting out of or around the tool all together.\nI\u0026rsquo;ve hit this a lot recently as I\u0026rsquo;ve been getting us established in a product management tool and attempting to set good practices. We bought the tool because we knew we needed to fill a gap in how we were planning and communicating. But it makes every configuration choice a change management event.\nOn top of that, because it\u0026rsquo;s a new tool and a design process to set it up and get it working for the team you have to iterate. Sometimes I make suboptimal changes in the organization, naming or process. The line between agile discovery, implementation and change management is squiggly and a gradient.\nPractices that are working for me.\n Create new views and tools privately first. Find members of the team you can trust for a variety of feedback. Write some documentation to clarify intent. Patience Adjust as needed  ","permalink":"https://www.nortrup.dev/posts/product-management/tension-in-product-ops/","summary":"I think my core challenge with Product Ops, particularly standing it up from scratch, is the tension for modeling systems and processes as they are now vs how I want them to be. Paired with the tension between how much we need to change and how fast the organization is able to absorb change.\nEspecially as the guardian and manager of the product tool stack. I know that if I set up the tools the way we work now, then everyone will continue the way we are now.","tags":["Product Ops","Product Operations","Product Management"],"title":"Tensions in Product Ops Tool Design"},{"content":"I\u0026rsquo;ve been enjoying the fediverse and mastodon as I\u0026rsquo;ve left Twitter for reasons. But one thing that I\u0026rsquo;ve been exceptionally interested in has been watching multiple newcomers attempt to build offerings on top of the activitypub protocol, then fail dramatically when they realize that while what they have built might be useful for some use cases that it runs into an incredibly hard wall of fediverse culture.\n I’m not speaking hypothetically. In the dying days of 2022 I watched in real-time as this eager young fellow bounced onto the stage and said he had this new full-text thing he was about to launch, it would index all the instances your instance was federated with, and it was carefully built to penetrate various Mastodon blockages. And anyone who didn’t want to be scraped and indexed had to opt out. (He also claimed it was going to be available only to “genuine admins”.)\n\u0026ndash; Tim Bray Private and Public Mastodon\n  Tim Bray covered some items around full text search. Mastinator - Some folks created an ActivityPub tool that could be very handy for testing ActivityPub implementations, but they left it running, and it was randomly following and reposting toots without consent. lgbt.furry attempted to build a blocklist aggregator on top of the #fediblock hashtag without taking any efforts to understand the history of the hashtag or why and how it was created. Mostly they tried to erase the fact that it was created to actively combat anti-black racism in the fediverse.  Each of these examples are case studies in running into a market that does not want what you are selling (even when you are giving it away) and floundering. As far as I can see from these efforts each effort was lead by curious engineers who were excited about the fediverse and wanted to contribute to this new platform by building on top of it. I even think that each of these ideas has merit and value.\n Not everyone wants full text search, but it might be valuable in some cases. Admins and the community at large objected to being default opt in added to a full text search of all the things. End-to-end testing is a good thing :tm: but the community at large objected to having their posts reposted by a bot without any consent or clear opt out. Good block list and defederation lists are going to be important to manage the scale that seems like it is coming for the fediverse if Twitter continues to implode.  But in each case, despite valid use cases the products (yes we\u0026rsquo;ll call them products even if they were free and open source) failed early and hard because the market was not remotely interested. And while the actual cost is probably a few weekends of time and some EC2 instances. But it is very easy to imagine this happening to a company with actual stakes.\n Aside: This is also an interesting example of the dichotomy of user vs buyer that plagues enterprise software. Here the buyers weren\u0026rsquo;t CISOs with their security budget, but fediveres admins who can choose to defederate and promote the defederation of projects that violate community norms.\n That isn\u0026rsquo;t to say that every open source needs a product manager, but it is a reminder that one of the most important things that the product management skill set can bring to a project is helping to identify and mitigate risk early in the product lifecycle. All three products could probably been successful if they had done some minimal additional research on what the community expectations were. Full-text search and Fedinator probably would have been just fine if they had been opt-in. All that was asked of the lgbt.furry team was to credit the creators of the #fediblock hash tag and the hard work that had been done to turn that into a community norm.\nInstead, in each case the individuals and teams dug their heels in and insisted that their work should be accepted because it was technically possible and technically novel. I think there is a fair amount of white privilege in those positions, potentially bordering on racism. I\u0026rsquo;ve seen this in multiple enterprise products where superior technical solutions failed to win the day because they didn\u0026rsquo;t actually meet market needs or community expectations.\nThose failures frequently happen outside the product / engineering agile delivery process. They happen in the ideation and bet selection process where good ideas get approved without clear identification of the risks and dynamics of the product. Or, they happen after the product is built and go to market fails to properly position or launch the product.\nSo before you go build your next fediverse project or enterprise software feature. Spend some time de-risking the whole product experience, not just the technical implementation. How will the product be received by the whole community that will interact with it.\n","permalink":"https://www.nortrup.dev/posts/product-management/mastodon-and-product/","summary":"I\u0026rsquo;ve been enjoying the fediverse and mastodon as I\u0026rsquo;ve left Twitter for reasons. But one thing that I\u0026rsquo;ve been exceptionally interested in has been watching multiple newcomers attempt to build offerings on top of the activitypub protocol, then fail dramatically when they realize that while what they have built might be useful for some use cases that it runs into an incredibly hard wall of fediverse culture.\n I’m not speaking hypothetically.","tags":["Mastodon","Product Management"],"title":"Mastodon projects and failure to product"},{"content":"This site is hosted on GitHub pages using Hugo, mostly because it gives me an excuse to play with very simple CI/CD pipelines and scratch the itch that wishes I was an engineer rather than a product manager. Hugo is nice because it creates the RSS feeds that I love to have and use myself. I have been using that RSS feed to drive automated publishing of new articles to social media through Zapier. The pipeline looks something like this until just recently\n Write articles in VS Code on my laptop Push to GitHub GitHub Actions build the static site and host with GitHub pages. Zapier sees the new post in the RSS Feed Adds a new item to Buffer to publish on Twitter and LinkedIn.  I\u0026rsquo;ve left twitter because of reasons, and moved to Mastodon. I quite like it and wanted to take some time to update my workflow to stop feeding Twitter my content and start sending that into Mastodon. Unfortunately neither Buffer nor Zapier have a pre-made integration with Mastodon, so I had to do some DIY. This seemed like a decent time to refactor buffer out of my workflow entirely. I think it\u0026rsquo;s a great tool, but I don\u0026rsquo;t write nearly enough to use it, and I\u0026rsquo;ve never paid for it because I\u0026rsquo;m not in a marketing department.\n{{partial \u0026ldquo;partials/}}\nIntegration vs simple HTTP Actions I have seen several posts out there describing how to do this with just Zapier\u0026rsquo;s Webhook POST action. But I got to the point where I had to store a credential and I wanted to be sure that my credentials were stored as credentials and not just as a string value. To be sure of that I took the extra step of creating a full integration. The upside of this is that if I want to make more integrations I can start adding additional actions without having to redo some authentication pieces.\nMastodon Setup The first thing you\u0026rsquo;ll need is to create a mastodon app. In Mastodon settings go to Development and create a New Application. When you create the account you\u0026rsquo;ll need to grant two scopes.\n read:accounts which will be used to confirm that we have configured authentication correctly. write:statuses which will be used to create new posts.  After you create the application you\u0026rsquo;ll be provided with a Client Key and Client Secret which you\u0026rsquo;ll need in Zapier later. Keep them available for copy and paste.\n  A mastodon app with required scopes.\n  Zapier setup You\u0026rsquo;ll need to go to the Zapier Developer section and click on the big Start a Zapier Introduction. Fill out the fields, I didn\u0026rsquo;t worry about most of the values because I wasn\u0026rsquo;t going to publish the integration publically, because I have no official association with the Mastodon project.\nAfter that is done you need to setup authentication. Chose the OAuth scheme. I know OAuth is more complicated, but it\u0026rsquo;s also the best tool out there.\nConfigure fields I created a field for Instance with a key of instance. If I worked a little harder I would have done additional fields for Client Key and Client Secret, but I was running out of nap time. When I eventually do the additional work I\u0026rsquo;ll be able to create different connections for different mastodon instances that I might some day take part in.\nCopy you OAuth Redirect URL Here Zapier is going to give you a redirect URL so that after you login with your mastodon instance you get sent back to Zapier. Take this URL, go back to your Mastodon developer settings screen and paste it into the field titled Redirect URI. That field likely has a default value of urn:ietf:wg:oauth:2.0:oob which you can add to or replace.\nEnter Application Credentials Back in the Zapier console Step 3 is you\u0026rsquo;ll paste in the credentials you have from Mastodon. The Client Key value from Mastodon goes into the Zapier field Cliend ID and the Client Secret field goes into Client Secret\nOAuth Endpoint Configuration Next you are required to add in several URLs from the Mastodon OAuth API implementation. If you\u0026rsquo;ve named your configuration field instance like me. You can do some copy and paste here.\n Authorization URL: https://{{bundle.inputData.instance}}/oauth/authorize Scope: read:accounts write:statuses Access Token Request: https://{{bundle.inputData.instance}}/oauth/token Refresh Token Request: I left this blank because my single action shouldn\u0026rsquo;t need to refresh. I can\u0026rsquo;t think of a downside to checking it. Test: https://{{bundle.authData.instance}}/api/v1/accounts/verify_credentials - This URL will be invoked to make sure that the credentials that we received are valid after login.  After that you should be able to use the test buttons. You should get redirected to your Mastodon instance and then bounced back to Zapier after login.\nCreate an Action I\u0026rsquo;ve opted to create a single action Create Post. Zapier has three tabs for this: Settings, Input Designer, and API Configuration.\nSettings  Type: Create Key: publish Name: Create Post Noun: post  Input Designer Here I created a single text field that will be used for my post text. More work for me might someday be to add a media support to this. To do that I think that I would need a second action to upload and a field in the post action to add the media URL. But again, I\u0026rsquo;m under a nap time deadline.\n Type: Input field Label: Content Key: content  API Configuration This is where the magic happens. First set your POST request to https://{{bundle.authData.instance}}/api/v1/statuses. You\u0026rsquo;ll see that we are grabbing the value of the instance name from the authentication fields. Next you\u0026rsquo;ll need to expand your operations and add both HTTP Headers and a Request Body.\nIn the Headers section you need to add one header. Authorization with a value of Bearer {{bundle.authData.access_token}}. Again we are grabbing the access token from the authData bundle. Zapier does all authentication for you, all you need to do is grab the access token.\nIn the request body section add one field status with a value of {{bundle.inputData.content}}. If you named your input field something other than content use that name here.\n  It should look like this!\n  Test and Use After that I was able to test the action and see the post show up on Mastodon. The final step was to go back to my zap and replace the step to add this to my Buffer for Twitter with the new Mastodon step.   The step in my zap posting to Mastodon\n  ````````\n","permalink":"https://www.nortrup.dev/posts/technology/mastodon-zapier-integration/","summary":"This site is hosted on GitHub pages using Hugo, mostly because it gives me an excuse to play with very simple CI/CD pipelines and scratch the itch that wishes I was an engineer rather than a product manager. Hugo is nice because it creates the RSS feeds that I love to have and use myself. I have been using that RSS feed to drive automated publishing of new articles to social media through Zapier.","tags":["Mastodon","Zapier","Hugo"],"title":"Create a Mastodon Integration for Zapier"},{"content":"Two years ago my wife bought me a class to make a bonsai. I made a tiny tree in a small pot. It was generous to call it a Bonsai and most practitioners would look upon it with a sense of \u0026ldquo;that\u0026rsquo;s cute\u0026rdquo;. Since then, I\u0026rsquo;ve managed to keep that tree alive and now have a collection of trees that I\u0026rsquo;m slowly turning into Bonsai. Along the way I\u0026rsquo;ve learned a lot about horticulture and art, and maybe some things that make me a better product manager along the way.\nThe biggest thing that Bonsai and Product have in common is that they are both Complex Adaptive Systems. Bonsai live in small containers but react to the weather, soil, pruning, fertilizing. You have to keep the tree watered and fed, and keep the balance of healthy root and foliage. Software products live in small containers, react to users, developers, growth, and changes in taste. You have to keep them updated and running and healthy, and keep a balance of new features and technical debt.\nPatience Bonsai is an art practiced on the scale of decades. Masterpieces are handed between generations of care takers. Master to apprentice, parent to child. In order to keep a bonsai tree alive you must balance advancing the tree as a work of art with the requirements of its continued health.\nEach season you can do maybe one changes of significance. Sometimes a change like repotting a tree or a major styling will mean you have to let the tree sit for a whole year in gentle care before you do anything with it. One tree I bought at Thanksgiving last year got moved to a different pot and got a first trim to bring its shape generally right. Next spring it will move to a bonsai training pot. Then I won\u0026rsquo;t do anything until late fall when the roots have had all summer to recover. Slow moves, lots of time for the system to recover.\nSimilarly, with software products, patience is an important skill to make sure we don\u0026rsquo;t push the team faster than they can write good code, or make changes to the product faster than you can learn from users response to the changes. Patience can help us be less frantic and pay attention to the work in front of us in this season rather than the whole roadmap.\nAs John Cutler puts it: Are You Shipping Faster Than You Learn, or Learning Faster Than You Ship?\n When a team accumulates a lot of learning, it can be tempting to settle into a period of fast shipping. “We know what we need to build, and just need to execute!” But that certainty is a mirage. We let our guard down. More efforts miss the mark multiplied by the increased rate of shipping.\n This isn\u0026rsquo;t to say that you need to go at Bonsai speed with software. In fact there is a lot of research that CI/CD results in safer development and better products. But Bonsai has taught me that sometimes you need to remember patience when you are waiting for your engineers to build something, or waiting to learn from an experiment. Sometimes you cannot go at break neck speed. As I\u0026rsquo;ve done more Product Operations I\u0026rsquo;m finding that people move much closer to Bonsai speed than software speed.\nBalance in maintenance Bonsai requires that you keep a tree in constant balance between the roots that collect nutrients and water from the soil while needing sugars to grow and work and the foliage that produces sugars from photosynthesis but needs water and nutrients from the roots to grow and photosynthesize. If you get those systems out of whack with each other the plant cannot grow, might die, and you certainly can\u0026rsquo;t advance your goals for how the tree looks as a piece of art.\nIn order to do this successfully you must manage how much trimming and shaping you do. You have to do those operations in the proper season or the plant won\u0026rsquo;t be able to recover be for winter cold or summer heat. Repot in mid-summer and their won\u0026rsquo;t be enough healthy roots to provide water for the lush active foliage. If you cut back the foliage hard in mid-summer styling you won\u0026rsquo;t be able to produce enough sugar to keep the roots healthy, and the tree will starve for energy, the roots will die, and now you need to save the tree or lose it instead of making progress. Similarly, in Product Management we must always be in balance both in what we do to the product, but also how we operate as people in the system.\nWith respect to the product we need to make sure that we keep different types of work in balance with each other in order to keep the product healthy. We need to balance adding new features with tending to technical debt payments and the tasks that keep the software up to date. This reminds me of the Flow Framework of Flow Dirstribution and managing the distribution of different flow items (feature, bug, task, debts) for a healthy product that achieves business outcomes. In the case of commercial software success is a growing profitable business. In bonsai, success is a healthy, beautiful piece of art.\n  Balance in presentation Parallels between the art of composing an attractive tree and the art of composing an attractive UX are probably the most obvious parallels I could draw. But, I\u0026rsquo;ve always been more of a platform and infrastructure PM. So it has been fun to immerse myself in a visual art. I think the thing that I have been amazed at is the ever expanding set of concentric circles that it takes to compose a bonsai for display.\n The structure of the tree itself  Branch placement and length Trunk lines The direction of the trunk The visual style of the tree (formal upright, informal upright, cascade, slanting, etc) Development of fine twigging Leaf size Internode size   Picking the right pot for the tree Composing more than one tree together Having proper accent plants Having proper stands Having a proper scroll in the background  The list goes on and on and some steps along the way intersect with entirely different arts such as pottery and carpentry, and Ikebana (the Japanese art of flower arrangement). Similarly, with product the space of user experience is infinitely expansive. Starting at how a feature is designed and expanding up through how the module, and product are used and out into how customers discover, buy, onboard, experience and renew with your product. How your organization builds products and prioritizes. We work with designers, engineers, customer support and success, sales, and marketing. All of these skills is expansive and connects out to further.\nPay attention Finally bonsai prompts me to pay attention to the details. Despite being a long term project of decades, success requires that you pay attention day to day season to season. Does the tree need more water, two or three times a day? Have you overwatered? Do you need to move it to shade in the summer heat? Do you have pest problems? Has the soil broken down? Is your wire biting into the tree?\nConsistently paying attention to the details is important in bonsai and product, and really in life.\n","permalink":"https://www.nortrup.dev/posts/product-management/learning-product-from-bonsai/","summary":"Two years ago my wife bought me a class to make a bonsai. I made a tiny tree in a small pot. It was generous to call it a Bonsai and most practitioners would look upon it with a sense of \u0026ldquo;that\u0026rsquo;s cute\u0026rdquo;. Since then, I\u0026rsquo;ve managed to keep that tree alive and now have a collection of trees that I\u0026rsquo;m slowly turning into Bonsai. Along the way I\u0026rsquo;ve learned a lot about horticulture and art, and maybe some things that make me a better product manager along the way.","tags":["Product Management","Bonsai"],"title":"Better Product Management through Bonsai"},{"content":"I recently took on the role of Product Operations at Tanium. Which has been a wild ride and one of my most exciting things I\u0026rsquo;ve done in product in a long time. Here are some early notes by way of an experience report for others who might end up walking this path.\nSome context; when I started this role, I had been at Tanium for two and a half years which is a good amount of time to learn the ins and the outs of the organization. I had spent a fair amount of time back benching on product practice. I had coached a few of the junior product managers and done some rabble-rousing and process suggesting.\nWe also did not have an existing product ops function at Tanium. Our new CPO opted to create the role in order to help standardize process and practice across the multiple portfolios at Tanium.\nHere are some things I\u0026rsquo;ve learned and done.\nClarify your mission One of the things that felt important to me at the beginning was to have a clear succinct explanation of what product ops was and what it was doing at the company. This was particularly important because my boss started throwing me into all sorts of meetings with parts of the organization that I knew existed generally but had never interacted with. To this end I have the handy quip of:\n I am a product manager whose product is the product management team. My job is to help the other product managers make better decisions, faster, simpler and more consistently.\n I\u0026rsquo;ve also had to make it clear a few times that I\u0026rsquo;m not the PMO or project management team. I\u0026rsquo;m not here to set up your meetings or make sure your project hits its deadlines. My job is working on the systems that help you be successful. As with all product jobs sometimes we have to do some things not in my job description, but I try to clarify it isn\u0026rsquo;t my primary role.\nWork in Progress Limits are important I\u0026rsquo;ve found it really important to understand what my personal work in progress limits are. I have a whole list of things that I want to help do for the product org, but I can only really manage about three things at once. For me that has been:\n Purchase a product management tool and get us out of planning in JIRA Run a quarterly planning process Get the product and engineering org better connected to the product marketing team.  Some of the things that I\u0026rsquo;ve put off, sometimes to my bosses' frustration:\n Getting all the analytics for all the things. I love analytics, and we need to get there, but it also really needs time and energy to get into all the details to really make a difference. Working on how people made decisions about what got prioritized my first quarter. We needed to get there but both in the first iteration with me running the process and an org shuffle we needed to just work with existing process for the most part.  Really getting aligned with all the other functions. We are getting there, but in the first ninety days I knew we weren\u0026rsquo;t getting into deep integration and partnership right away. In a lot of cases I wanted to wait until I had improvements to the Product Tool chain. A lot of the asks from these teams were for better visibility into what Product was planning. That was hard to provide in JIRA because not everyone had JIRA access and JIRA doesn\u0026rsquo;t have the greatest tools for sharing or presenting information to non-technical audiences.\nFinding some tools One of my CPO\u0026rsquo;s first asks was to find a piece of product management tooling. The product team was working out of SharePoint, Jira, spreadsheets, PowerPoints, emails. It was working mostly but it was inefficient. Our major criteria were something that allowed us work from ideation to a published roadmap with key integrations in JIRA, Salesforce, and SSO with a roadmap publishing tool. We evaluated four different tools, seriously looked at tool and settled on ProductBoard.\nRunning Quarterly Planning Quarterly planning is hard and contentious. Some of the things that I learned most were that we needed to do a better job articulating what was important and why it was important early in the process. We worked to cast a wide net to make sure that everyone in sales and marketing felt like they were heard in the things that were selected. Unfortunately this meant that we had to leave a lot on the cutting room floor, and the cutting itself took a lot of mental and organizational effort.\nLesson learned: Ask leaders to make hard choices sooner in the process, some space for evaluation between choices based on level of effort can help you cover the last bit, but it can\u0026rsquo;t take you from a big list to a small focused list.\nSome advice that I\u0026rsquo;m not going to take I\u0026rsquo;ve seen some advice out in the wild that doesn\u0026rsquo;t jive with me. I\u0026rsquo;ve read several articles that talk about product teams handing off the menial and repetitious tasks to Product Ops to handle. Some have even said that Product Ops should be responsible for ensuring that QA is done on new products.\nI\u0026rsquo;m early in this but my perspective is that you add Product Ops to your team when you have a scaled product team and you need to make things efficient and consistent. So I see a major role for Product Ops is to refine out the drudgery, but you can\u0026rsquo;t get high leverage out of your ops team if you are just asking them to suck up the drudgery.\nMy thinking here is highly influenced by my two years as a company Executive Officer in the Army while deployed to Iraq. XOs make a company run by making sure that everyone had what they needed to do their job, making sure they got their jobs done, then making sure the next time we did the job we did it better. And I did a fair amount of drudgery while in that job, but I was not there to catch drudgery.\nMore to come I\u0026rsquo;m sure there are more lessons that I should have learned, but I haven\u0026rsquo;t written down. I\u0026rsquo;ll try to write some more over time. In the mean time, here are some things that I\u0026rsquo;ve been reading to try an learn this role. Compared with the information that I had available to read about Product Management, I\u0026rsquo;m finding far less guidance in the world.\nReferences  Hiring a Product Operations Manager? Read this First — Produx Labs Product ops drives product culture - Mind the Product Product Ops Overview - Silicon Valley Product Group : Silicon Valley Product Group This course from Produx Labs and am looking forward to the book that they are working on. Product Ops 101 - February 2023 — Produx Labs  ","permalink":"https://www.nortrup.dev/posts/product-management/product-ops-first-take/","summary":"I recently took on the role of Product Operations at Tanium. Which has been a wild ride and one of my most exciting things I\u0026rsquo;ve done in product in a long time. Here are some early notes by way of an experience report for others who might end up walking this path.\nSome context; when I started this role, I had been at Tanium for two and a half years which is a good amount of time to learn the ins and the outs of the organization.","tags":["Product Management","Product Operations","Product Ops"],"title":"Product Operations First Take"},{"content":"I\u0026rsquo;ve spent a lot of time as a platform product manager. At Splunk I managed the app certification platform that Splunkbase and Cloud relied on. Later I helped build the platform services for Splunk Cloud Services from the ground up. At Tanium I managed the Tanium Data Service which served as a common data layer for all of our modules.\nBeing the PM for a deeply technical platform team can be really hard. Unless you come from a deeply technical background it feels hard to have a way to helpfully contribute to that effort. A lot of the work that gets done by a platform team will be very in the weeds, or will be in close execution with the consumer up the stack and their PM on the problem you are trying to solve. You are also more removed from the end-user of the product, which can make empathy and understanding harder. That can make you feel like a glorified project manager.\n You need to do less solution definition with the team and more working ahead of the team to prioritize the work that they are going to do. You have multiple consumers all of whom have their top priority things. You have a highly leveraged platform team. The platform has higher stability requirements than your consumers because you have more dependencies. You can\u0026rsquo;t easily change things that other teams consume You literally have higher up-time requirements than consumers because you are lower in the stack then they are.  To help manage these constraints you need to be a little bit more of a scout and less of a solution maker. Here are some things that have helped me be successful:\n Be actively looking at the roadmaps of all of you consumers to understand which things will require changes to your platform. Understand the company strategy and help prioritize that muddle of requirements into a prioritized queue of items your team can work on. Help your team understand any of the timelines that consumers are working against and what their impact will be on that timeline. Help other teams understand what the flow rates of your team is and help them plan their timeline and backlog around your flow rate. Help refine the acceptance criteria in someone else\u0026rsquo;s requirements to clarify the work for your team. In providing a backlog of which items you have coming up in the backlog and what the timelines you can help them make better technical choices. They can see what the next ~3 months look like and if there are common patterns in the up coming work that they might want to build stronger abstractions and reuse. Or they will see that they can build something simpler because they don\u0026rsquo;t have variations coming down the line. By helping them see deadlines you can head off some over engineering. In my experience the level of detail that folks on platform teams tend to want to over engineer things. They come from a good place but sometimes as the PM we need to help keep that in check with reality.  ","permalink":"https://www.nortrup.dev/posts/product-management/platform-pm/","summary":"I\u0026rsquo;ve spent a lot of time as a platform product manager. At Splunk I managed the app certification platform that Splunkbase and Cloud relied on. Later I helped build the platform services for Splunk Cloud Services from the ground up. At Tanium I managed the Tanium Data Service which served as a common data layer for all of our modules.\nBeing the PM for a deeply technical platform team can be really hard.","tags":["Product Management","Platform"],"title":"Being a Platform PM"},{"content":"One of the best leaders I ever worked with was my first XO at 1-14th Cavalry David Polizzotti. One day while we were deployed to Afghanistan I was stressing about something and he very calmly looked at me and told me that I needed to do a better job at accepting that I as an individual was a wholly replaceable cog in the machine. At the time that felt like a hard thing to swallow. I was a primary staff member for a combat squadron in an active combat zone. I felt a little big in my multi-cam britches.\nAfter some further discussion he helped me see the bigger picture of the value of making yourself disposable in building robust and capable teams. In the Army and particularly important for combat arms teams. Any given individual on the team could die at any time. Combat is unpredictable, bullets don\u0026rsquo;t discriminate by rank. Even on the less violent side of life in the Army everyone rotates out eventually. You are reassigned, take leave, R\u0026amp;R from combat. All of these events take leaders and team members out of the fight; but the team has to keep accomplishing it\u0026rsquo;s mission. The organization never gets a day off from providing national defense.\nIf your team can\u0026rsquo;t survive someone being suddenly and completely removed from the day to day operations then leaders haven\u0026rsquo;t done their job to build resilient teams. Every team member needs to cross train with their team members to make sure that they are cross trained. This includes not just hard skills like the use of weapons, radios and performing medical tasks. But team members need to also think up a level and be prepared to take up leadership of the team. Do they understand troop leadership, do they know the mission, can they make decisions to forward the mission when the plan has gone to absolute hell.\nA favorite example is this scene from \u0026ldquo;We Were Soldiers\u0026rdquo;\n  You might ask why I have written all of this under the heading of product management. People rarely die as a result the middle of building software. But, people disappear all the time. They move to a new company, take an internal transfer, get pulled to some new project, go on vacation. These are all things that people will and must do. You have to be prepared for them and the fundamentals of building robust teams do not change.\nYou cannot bottleneck the entire team or team of teams on the fact that one product manager is out of the office this week. One of the underlying fundamentals of empowered teams and robust resilient organizations is making sure that the team can cary on without individuals in all roles. If you ever come to a point where someone says \u0026ldquo;Oh, I can\u0026rsquo;t do that because X isn\u0026rsquo;t here this week.\u0026rdquo; That is a place where your process and training need to get better.\nNot only is this good for the organization if someone is away, it helps the organization move faster. If you aren\u0026rsquo;t blocked on a product manager being away on vacation, you aren\u0026rsquo;t blocked when they are in a meeting or at an offsite. You don\u0026rsquo;t have to break the cycle of fast thinking to go ask someone a question.\nThe further up the org chart you go the more important it is. We want teams on the line to be thinking in fast mode and leaders at the top to be using slow system thinking. The more you push decision making authority and context down. The more you time and space you get back to be able to do the leadership things that only you can do.\n","permalink":"https://www.nortrup.dev/posts/product-management/making-yourself-disposable/","summary":"One of the best leaders I ever worked with was my first XO at 1-14th Cavalry David Polizzotti. One day while we were deployed to Afghanistan I was stressing about something and he very calmly looked at me and told me that I needed to do a better job at accepting that I as an individual was a wholly replaceable cog in the machine. At the time that felt like a hard thing to swallow.","tags":["Product Management","Leadership","Military"],"title":"Making Yourself Disposable"},{"content":"I\u0026rsquo;ve written recent guides to creating a backlog from scratch and sorting your backlog by value and effort. As part of building and sorting the ideas and initiatives on your roadmap you will start to show that roadmap to other people. When you do people will have opinions about the order that you have sorted things in. In most cases their opinion will either be agreement, or more commonly, they would like the thing that is important to them to be higher on the list. These differing opinions are good, this is why we build a roadmap. It is better to have those discussions when we are thinking about building things then after we have spent time building something.\n  Changing the backlog math\n  If a stakeholder wants to move something around on the backlog then they should have information that justifies changing the underlying math of the backlog. If you want something to move up the stack you need to convince the PM that it is either more valuable or eaiser to build. If you want to drive something down the backlog (because sabotage is a strategy) then you need to convince the PM that it is less valuable and harder to build. So let\u0026rsquo;s outline some decent reasons to move those numbers around. These are some patterns of prioritization that you can use to help clarify the discussion.\nMore important  More strongly supports one or more business goals or OKR Unlocks another initiative that is higher ranked. Feature or step must be part of a first release Strong customer demand Customers are upset this isn\u0026rsquo;t fixed yet  Less important  Unlikely advance a stated business goal Lack of executive sponsorship No one has actually asked for this / lack of clear interest People have said they want it but not that they would pay for it  Easier to Build  Similar to something already built Prior art and recommended practices to draw from Open-source components can be utilized Decreasing the success criteria (you are aiming to high) Decrease scope and remove planned but not strictly necessary features  Harder to Build  Techdebt In a more difficult Cynefin domain. Blocked waiting on something else to get built Cross team, valuestream or platform work is required Works against your core technology differentiators Available engineers don\u0026rsquo;t have proper experience  Watch out for local optimizations As discussed in my post on quick sorting, we want to avoid trying to micro prioritize issues and initiatives. Our ability to accurately estimate the granular value or effort of our work in advance is limited. You are looking to draw out information you missed that would move an idea or initiative between the big columns in our sorting process. Changing our value score from a 2 to a 3 or a 2 to a 5 is significant in our course sorting. Trying to change the sort order inside of a column is less useful. We probably in the long run can\u0026rsquo;t tell the difference in outcomes between Idea 3 being marginally more important than Idea 7 if both ideas still have a value of 2.\n  ","permalink":"https://www.nortrup.dev/posts/product-management/manipulating-the-sorted-backlog/","summary":"I\u0026rsquo;ve written recent guides to creating a backlog from scratch and sorting your backlog by value and effort. As part of building and sorting the ideas and initiatives on your roadmap you will start to show that roadmap to other people. When you do people will have opinions about the order that you have sorted things in. In most cases their opinion will either be agreement, or more commonly, they would like the thing that is important to them to be higher on the list.","tags":["Roadmap","Product Management","WSJF","Prioritization"],"title":"Manipulating the Sorted Backlog"},{"content":"There is a lot of complexity in Product Management, but at the very heart of it what we look to do is order all of the things we could be doing to produce the most value possible. To do that we have to carefully weight the balance of value to effort in order to properly sequence the infinite set of work that we could be doing.\nEstimating is a tricky and messy business, and I\u0026rsquo;m frequently skeptical of. But when you are trying to prioritize multiple potential projects as a product manager, having some basic numbers can really help things along. This is a system I\u0026rsquo;ve used multiple times to quickly establish baseline value and effort estimates. I like it because it is fast and avoids a lot of hemming and hawing. The goal of this system is to get things in mostly the right order and avoid making big mistakes.\n  Avoid Big Stupid Mistakes   I\u0026rsquo;ll now walk you through a process of establishing some baseline order. We\u0026rsquo;ll go through this twice, once for value, probably set by a PM. And a second time for effort, probably lead by someone on the engineering team. To get through prioritization quickly we want people to use their system one thinking. And tell us what they think without a lot of deep analysis. The more deep analysis we do at this stage the slower this will go and the less useful it will be.\nStart with your stack of unsorted ideas.   Unsorted ideas.   As a PM, ask your self:\n If I could wave a magic wand and have either one of these things right now what would I pick?\n There are lots of reasons to want something more.\n More revenue Better alignment with goals Better alignment with market More stakeholders yelling at you That irate customer  Put the thing you want more to the right of the thing you want less on the board. This is your first sort. Congratulations. Have your engineering counterpart or team sort the same two cards based on effort. Which one of them is harder than the other?\n  Grab another card and ask yourself. Do I want this more, less, or the same as one of the other things on this board.\n  Add your third card   Great, now you are really on your way. In this picture we decided that idea three was about as valuable as idea 1. Do a quick feedback check with the room (you should be doing this with other people, it\u0026rsquo;s a group activity).\n  Keep going until you have all of your big ideas on the board. You should have something that looks roughly like this figure below. Note that we have multiple cards that are about the same value. Remember we don\u0026rsquo;t need intense precision here. These are estimates not predictions.\nAsk everyone around the room for some feedback. Anyone think you are super wrong. Talk about that, briefly.\n  Now you can add some column values above the cards. I didn\u0026rsquo;t do this until now because we can always add something in between other columns and its a pain to renumber things. Also people\u0026rsquo;s brains get weird when you put numbers up and they over think. I use fibonacci sequence numbers for columns because I think it makes the final values spread out more.\n  Now you can combine the values from your PM value based order and the engineering effort based order and you get a number! This is the weighted shortest first value. Take all your cards, calculate their values and then sort the whole list. Now you have the start of a prioritized backlog.\n  The important things to remember is that this is just the first step. You need to take these boards and start showing them to people. Show your boss, show your stakeholders, show other PMs, show customers. Ask them which items are higher or lower on the list than they would like or expect. Dig into why they think something is higher or lower on the list.\n You thought there was less value than they did. There is disagreement on how hard it is. Maybe you don\u0026rsquo;t actually agree about what you have to do to solve that problem or build that solution. Perhaps you forgot to recognize some piece of horrible technical debt?  Have lots of those conversations, have them all the time. As you get interesting answers, revise your value and effort estimates.\n","permalink":"https://www.nortrup.dev/posts/product-management/quick-prioritization/","summary":"There is a lot of complexity in Product Management, but at the very heart of it what we look to do is order all of the things we could be doing to produce the most value possible. To do that we have to carefully weight the balance of value to effort in order to properly sequence the infinite set of work that we could be doing.\nEstimating is a tricky and messy business, and I\u0026rsquo;m frequently skeptical of.","tags":["Roadmap","Product Management","WSJF"],"title":"Quick prioritization of a backlog"},{"content":"Very rarely will you build a roadmap from absolute scratch. But the technique is helpful because you can apply the process to help rationalize or refit an existing roadmap. I\u0026rsquo;m a strong believer that you should be able to connect all the work you are doing from top to bottom of the company. A developer should be able to look at any task and put it into the context of the larger solution they are building, the problem it solves for the customer, and the business objective that it supports.\nI see this as an extension of something that I wrote into all military orders. Every unit received their mission as well as the mission of units two levels up. So that when the plan wasn\u0026rsquo;t working you could make intelligent decisions to keep the larger mission moving in the right direction.\nBusiness Goals Start with your business goals, what is your company trying to be or accomplish? These are probably the things that other departments are talking about. Ask your CEO, CFO, Head of Sales, head of support, customer entablement, partnerships.\nGoals will probably be something along the lines of:\n More revenue More customers Bigger customers or moving up market. Smaller customers or moving down market Shorter sales cycles More support revenue Less support hours Happier Customers Pay down technical debt  Hopefully these are also paired with a \u0026ldquo;Why\u0026rdquo;. Something like:\n We want to have 1000 customers in the small business segment by the end of next fiscal year because they have more revenue per-customer than our individual premium customers and have a higher lifetime value because they rarely churn.\n You\u0026rsquo;ll probably get two or three of these if you canvas across the company. Talk to all the folks at the leadership level and ask them to bucket these goals into groups of importance.\n  Organizational Goals   Next talk to all sorts of folks about about customer problems that you can solve to help sell to the customers that will help you accomplish those goals.Talk to customers, sellers, read notes on deals you didn\u0026rsquo;t win, look at telemetry to see where there are breaks in the customer journey in your target audience. You\u0026rsquo;ll find lots of potential problems you could solve in 10 years. Also get metrics for what solving these problems would mean.\n  Goals with unordered ideas   As you start to discover these problems begin order those goals but which ones will give you the most impact for the least amount of work. The general formula is Cost of Delay / Effort. You should be able to start bucketing your goals into groups that are generally about as valuable as each other. You don\u0026rsquo;t have to get into super granular dollar value estimates of how much revenue is at stake. If you can do that good on you. But we are trying to avoid really big mistakes not pick between two things that could have very similar outcomes.\nWork with your engineering partners and work out the same very granular level of detail on how hard problems will be to solve. I like the cyneffin framework at this level. Really we want to understand where on the spectrum of \u0026ldquo;we know how to do this and need time\u0026rdquo; to \u0026ldquo;I have no freaking idea where to start\u0026rdquo;\n  Goals with Weighted Ideas   Now you have a list of goals, with a list of problems you could solve to help accomplish them roughly sorted into Weighted Shortest Job First order. Work with your leadership to figure out how much you want to put into each goal, nice round percentages of your engineering staff. Keep aside some capacity for engineering to do engineering things. DevOps, infrastructure, bug fixing and fire fighting. Leave slack in the system.\n  Goals with Weighted Ideas   Look at your lists of problems for each goal, decide how many you can work at once with the number of engineers allocated to the effort. Put them into the buckets of Now, Next, and Later.\nNow is everything you are currently working on. Next are things you are willing to commit to customers that you will do. You\u0026rsquo;ll pick things up from this column when you finish a problem. Later are things you are thinking about but aren\u0026rsquo;t committed to doing.\n  Now Next Later Roadmap   Then start showing this to other people and see how they respond. Have good discussions and adjust based on those discussions. When you have confidence start building solutions to problems in your Now list. Have some folks (PM and Engineers) doing discovery for items in the next column\nCongratulations, you have a roadmap!\n","permalink":"https://www.nortrup.dev/posts/product-management/2022-04-01-roadmap-from-scratch/","summary":"Very rarely will you build a roadmap from absolute scratch. But the technique is helpful because you can apply the process to help rationalize or refit an existing roadmap. I\u0026rsquo;m a strong believer that you should be able to connect all the work you are doing from top to bottom of the company. A developer should be able to look at any task and put it into the context of the larger solution they are building, the problem it solves for the customer, and the business objective that it supports.","tags":["Roadmap","Product Management","Cost of Delay","WSJF"],"title":"Roadmaps From Scratch"},{"content":"In several PM Communities I frequent I see people who constantly ask, should I take a job a this series A or B startup, or a job at some extreme scale public cloud or tech company. Every time I see it I\u0026rsquo;m confused by it because I think of those companies being so far apart in experience that you should spend your time clarifying what you want in a job before trying to pick one or the other. In a hyperscale company there is tremendous specialization for products with billions of users. At a small start up it\u0026rsquo;s all generalists.\nAs you go through the scale up process, just about every role goes from generalist to more specialist. This is both a factor of having more people and that specialists can do a thing better than a generalist (hypothetically); and that there is enough work in a specialty area to justify having someone to do that work full time. So a PM in a small startup might be doing everything:\n Design Discovery Roadmap Strategy Product Marketing Enablement Content Hands on Enablement Data analysis Sales Calls QA Story writing Engineering planning Everything else  As you get bigger and have more customers you start to peel off those responsibilities into folks who focus on them all the time. You probably as a PM move to interfacing with those functions rather than just having that work disappear entirely from your purview.\nIn late stage startups not everything will go away and which things get peeled off at what time will depend on you customers, industry, company, and your particular talents.\nNothing says you have to devolve into slide decks. But in hyperscale companies if there is a specialization it probably exists as a different role.\nAlso, I would say most people don\u0026rsquo;t go all the way up the scale process; I\u0026rsquo;ve observed that folks seem to like companies at a certain size where they get the right spot on the specialist to generalist continuum for their comfort level matched against the level of support you get from having specialists. Some people like doing a little bit of everything and therefore love startups. Some people like being specialists in infrastructure API design and work on internal infrastructure products at massive public cloud providers. I personally like being somewhere in the middle.\nThis also isn\u0026rsquo;t specific to product, all the functions do this. Sales is just the sales person, then you have regional sales, then channel sales, then channels with regions, etc.\n","permalink":"https://www.nortrup.dev/posts/product-management/2022-03-07-pm-scale-up/","summary":"\u003cp\u003eIn several PM Communities I frequent I see people who constantly ask, should I take a job a this series A or B startup, or a job at some extreme scale public cloud or tech company. Every time I see it I\u0026rsquo;m confused by it because I think of those companies being so far apart in experience that you should spend your time clarifying what you want in a job before trying to pick one or the other. In a hyperscale company there is tremendous specialization for products with billions of users.  At a small start up it\u0026rsquo;s all generalists.\u003c/p\u003e","tags":["Product Management","Org Design"],"title":"Product Management Scale Up"},{"content":"This is a running log for a Star Magnolia that I acquired from a nursery as a Bonsai project.\nStats:  Species: Magnolia Stellata \u0026lsquo;Centennial Blush\u0026rsquo; Purchased: 2021-11-29 Purchase Price: $105 Purchased From: Swanson\u0026rsquo;s Nursery  References:  Michael Hagedorn Deciduous Early Development Part 1 - Part 2  When pruning, don\u0026rsquo;t cut to much. If you do you\u0026rsquo;ll create a lot of vigorous growth and end up with long internodes, which we don\u0026rsquo;t want. Leave some branches on the tree that you intend to keep or don\u0026rsquo;t need to cut now. Let them grow a little long until you eventually cut them off.   International Bonsai 2007 no. 1 Spring Flowering Bonsai - Developing Magnolia Bonsai Reddit Conversation on keeping this alive.  Responds well to hard chops. Back buds aggressively Don\u0026rsquo;t do any trimming until after it blooms in the spring. Do any trimming before it puts out too much new growth for the year so you can direct that growth.    Working Plan  Fall / Winter 2021-2022  Basic wiring for main trunks and desired future leads. (Blue lines below) Move into a pond basket and survey the roots. Replace up to 25% of soil with bonsai soil to start rotating out the nursery soil.   Spring 2022  Wait for flowers to bloom Chop the main trunks (red lines). My goal is to move new growth lower on the tree for a more compact shape and encourage some more thickening of the main trunks.  I also need to encourage ramification. Most of the branches look like the branches were being developed to be a tree in a yard, not a bonsai. I\u0026rsquo;ll be looking to promote secondary branch development.   Let it grow for the rest of the year.    2021-11-29 I Purchased this Star Magnolia on a bit of a lark when visiting Swansons Nursery while we were there to get kids Santa photos. I purchased this tree for $105, which was probably too much.\nOriginal photos side 1 and side 2. Things I like:\n It\u0026rsquo;s a more mature tree than I have now. I think that I can move towards an actual bonsai pot in the early spring. There is some decent movement in both of the trunks. There is more movement in the thicker of the two trunks. I think I\u0026rsquo;ll keep both trunks. I\u0026rsquo;m excited to have a flowering deciduous tree in my small collection. The soil feels pretty compacted I wasn\u0026rsquo;t able to dig in and see what the roots look like with just my fingers. Some more exploration will be needed once I get to repotting in February. ","permalink":"https://www.nortrup.dev/posts/bonsai/star-magnolia/2021-11-29-first-impressions/","summary":"\u003cp\u003eThis is a running log for a Star Magnolia that I acquired from a nursery as a Bonsai project.\u003c/p\u003e","tags":["bonsai","Star Magnolia"],"title":"Star Magnolia Bonsai Log / Plan"},{"content":"I\u0026rsquo;ve been pulling and analyzing Mik Kirsten\u0026rsquo;s Flow Framework metrics for several months at work. I do this with an incredibly ugly Clojure script that I wrote to learn Clojure. But I do think the metrics themselves have been a helpful lens to look at what is happening. Here are some of the questions I ask myself when I sit down to analyze the metrics.\nFirst, some qualifications:\n I pull metrics monthly with weekly intervals. I pull metrics at the portfolio level (lead by a Sr. Director of PM) I have occasionally pulled the metrics for my own projects. But the portfolio level feels closest to the value stream customers buy and also hits a nice balance of me doing the analysis in my spare time. I pull metrics entirely from JIRA. I know that I have some blind spots by doing that and my connectivity index is low; but it is what I have.  Things I look for:\n Is velocity increasing? As a growing product company, we generally want to see velocity increasing. Either by improving our systems of work or by adding more people to the company. Did the velocity change at a reasonable rate.  If I see big spikes, I worry that someone is on a death march to get a feature out If I see big dips, I worry that a new impediment has arisen and needs to be stabilized.   Does the distribution of flow items match the stated strategy?  If we are focused on the SaaS business, I expect to see more tasks. If we just released a major update, I expect to see more bugs. If we are in the middle of pushing a big update out, I expect to see more features.   Are the active time, flow time, and flow efficiency pretty even?  Big variations are an indicator that the system of work is not consistent.   Are the active time, flow time, and flow efficiency improving?  Much like velocity, we should be doing consistent work to improve the system of work and improve our flow time and efficiency.    Most of these questions will lead me to dig in further to what is happening in detail with the problems I see. I\u0026rsquo;m leaning towards trying to fix issues with flow consistency and speed over trying to address velocity directly. So if I see velocity stuck or declining I tend to look for problems that show up in flow time rather than problems that show up with velocity directly?\nHopefully, this helps you have some thoughts to start looking at your own flow metrics.\n","permalink":"https://www.nortrup.dev/posts/product-management/2021-10-31-what-i-look-for-in-flow/","summary":"\u003cp\u003eI\u0026rsquo;ve been pulling and analyzing Mik Kirsten\u0026rsquo;s Flow Framework metrics for several months at work.  I do this with an incredibly ugly Clojure script that I wrote to learn Clojure.  But I do think the metrics themselves have been a helpful lens to look at what is happening.  Here are some of the questions I ask myself when I sit down to analyze the metrics.\u003c/p\u003e","tags":["Product Management","Flow"],"title":"What I look for in Flow Metrics"},{"content":"I spoke recently with someone who was new to Product Management and was trying to learn how to do the job by reading blogs and books that talk about everyone\u0026rsquo;s ideal nirvana of product management. As he compared that with his organization (a large, well-respected company), he was distressed at the difference between what they saw and what they understood to be best practice. He was even debating if he should leave his current gig to work somewhere he could learn and practice this best-in-class PM craft.\nMy first comment was to not worry about doing it exactly how you read that they do it at the big giant tech companies, and I wouldn\u0026rsquo;t leave a job early to follow the greener grass. No company does it as well as they say they do in their blog post. PM is still figuring itself out as a role and not uniformly applied even inside the same company.\nMy second comment was that as a relatively junior line PM, he was in a great position to try and introduce some of the practices that he was reading about and try them out with their team. A line PM should be working very closely with a team of engineers and have really fast feedback on learning and trying new methods of doing things. You can try lots of ways to write user stories and acceptance criteria, experiment with how you facilitate sprint planning and reviews. Even working with your supervisor should be a relatively safe place to try structuring your roadmap or using a prioritization framework to communicate what you are planning and doing.\nIn some sense, your engineering team, boss, marketing, and sales counterparts are customers of your intellectual labor. You want to give them things that are useful and should be continually experimenting on how you can communicate intent more clearly. If you are working on short iterations of a few days to weeks, you have lots of cycles to learn on.\nDon\u0026rsquo;t wildly careen from method to method, but you do have some wiggle room to iterate. If you don\u0026rsquo;t feel safe experimenting with these things, then maybe you should be looking for someplace else to work. Because if you can\u0026rsquo;t try a different format for writing a story, you probably don\u0026rsquo;t have a safe place to run bigger experiments on the things that truly matter about your product.\n","permalink":"https://www.nortrup.dev/posts/product-management/2021-08-27-experiment-with-your-process/","summary":"\u003cp\u003eI spoke recently with someone who was new to Product Management and was trying to learn how to do the job by reading blogs and books that talk about everyone\u0026rsquo;s ideal nirvana of product management. As he compared that with his organization (a large, well-respected company), he was distressed at the difference between what they saw and what they understood to be best practice.  He was even debating if he should leave his current gig to work somewhere he could learn and practice this best-in-class PM craft.\u003c/p\u003e","tags":["Product Management","Process"],"title":"Experimenting with your process"},{"content":"I\u0026rsquo;ve been working with some stakeholders on how we do prioritization as a Product Management team. I started by trying to build a matrix that would serve as an easy key for keeping product managers mostly on the same page for setting the priority field in JIRA. I think there is value in having common standards. But the more I thought about the problem, I got more uncomfortable, because we can\u0026rsquo;t prioritize globally and take into account local context.\nThe priority field in JIRA has started to feel a lot like story points, not worth a lot outside of their local context. In an attempt to keep things simple my initial effort I put the number of endpoints impacted with some broad 1/3 buckets and complexity on the very broad criteria of the number of components that would need to be changed to complete the improvement. It\u0026rsquo;s nice, but I quickly realized that it doesn\u0026rsquo;t tie in any of the other factors.\n Time criticality / cost of delay - Some things are extremely important if you can do them right now, but not valuable at in a month. What value stream does the idea support, what is the priority of that value stream? I have lots of ideas that woudl improve the product, some of them touch 100% of customer endpoints, but the improvement itself is not well connected to the larger value streams that are important to the company right now. How well validated is the idea? Do we have lots of customer telling us that they are feeling this pain point? Is this as good idea we just had in the shower?  Clearly this list goes on and on. There is always more context, this is why the classic Product Manager answer is \u0026ldquo;it depends.\u0026rdquo; If you need to get into a multi-dimensional table to quick reference your global priority, than you are probably approaching things in a way that is going to cause difficulty in the longer term. If this is happening to you, start considering if you are using proxy metrics for success rather than real customer focused outcomes.\nPriority is still a useful field in tools like JIRA, it helps local teams sort and see what is important. It can be helpful in reports one level up to highlight potential discussions to be had (I see that you have this as a P0, why is that?). It might even help you tell if something has been vetted (I put a priority on things after I\u0026rsquo;ve talked about it with my team, it\u0026rsquo;s a local standard that we use to know what is triaged). But it gets less useful as you go up the chain to directors and chief product officers.\nWe should be looking as product managers to build systems where every level of the organization has room to manuever as long as we are aligned on priorities. More important than keeping track of how many P0s are open is being able to see what is in progress and what value stream does it align with. If you see work that doesn\u0026rsquo;t have clear alignment than we should start investigating what is going on. If everything is on alignment we should ask if we are goals have the right levels of investment in each of our value streams. Then we can discuss if we are picking the highest leverage work inside of any given value stream.\n","permalink":"https://www.nortrup.dev/posts/product-management/2020-12-14-against-global-priorities/","summary":"\u003cp\u003eI\u0026rsquo;ve been working with some stakeholders on how we do prioritization as a Product Management team.  I started by trying to build a matrix that would serve as an easy key for keeping product managers mostly on the same page for setting the priority field in JIRA.  I think there is value in having common standards.  But the more I thought about the problem, I got more uncomfortable, because we can\u0026rsquo;t prioritize globally and take into account local context.\u003c/p\u003e","tags":["Product Management","Prioritization"],"title":"Against Global Priorities"},{"content":"I\u0026rsquo;m sure if you\u0026rsquo;ve talked to me recently you\u0026rsquo;ve heard my song and dance on outcomes based road mapping. As I\u0026rsquo;ve been talking about it over the past few weeks something really clicked for me on why it\u0026rsquo;s so important to identify the outcomes early in the definition of an idea.\nWhen you are trying to get work prioritized and on the road map, it\u0026rsquo;s straightforward to start with a name for the solution that conveys meaning and then find supporters who also like the sound of the idea. An easy default is to talk about the solution you are proposing to fix a problem. They go together to help form a narrative story that works well in a meeting. We have this problem, and here is the solution!\nWhile this is really appealing, it also leaves us some challenges on the backend. If we prioritize problems with a measurement of what we are going to achieve better alignment on why we are trying to solve this problem, and allow ourselves more freedom to discover the right solution.\nLack of precision Words can be really precise, but the words that go on your road map as initiative titles usually aren\u0026rsquo;t. When I say \u0026ldquo;Universal Module Export\u0026rdquo; it means something to me, but probably means something different to someone else. By the time I get all of the required stakeholders on board I probably have 6 or 7 different ideas about the solution in people\u0026rsquo;s heads.\nIf I lead with \u0026ldquo;I want to increase workflow efficiency by allowing more users to export data without needing an admin to configure the export. I think we can achieve a 50% increase in the number of users who create or modify a connection.\u0026rdquo; Then we have a lot more clarity in the discussion about what we want to achieve, and we can talk about why that is or is not valuable for users or administrators, and how it fits with strategic priorities.\nStarting with this clarity about how you are going to measure success will result in a conversation about how you\u0026rsquo;ve chosen to measure the problem and progress towards the solution.\nYou are pinned to a particular solution It pins us to a solution early in the discovery process. What we really want is to solve the problem for our users, but now we are getting commitment to solve the problem using one specific solution. This probably takes good ideas off the table about how we want to solve the problem. If you are a PM you are probably not taking into account some amount of engineering, and design insight into the solution. If we lead with the outcome that we want, we can start generating and evaluating multiple ideas to get there.\nIf we start with a measurable outcome then we can get work collectively to outline the existing workflow, where problems are, what the value stream looks like, the relative difficulty of solutions. Product development is a team sport. Product Management does not need to be the hero of the story finding all of the solutions and delivering them to engineers.\nThe outcome might not work. The solution you picked early might not work. If completing the solution is the benchmark that you\u0026rsquo;ve set for yourself you are more likely to continue to build towards that benchmark. Then if you realize that your solution didn\u0026rsquo;t solve the problem you\u0026rsquo;ll have to come up with a next idea to solve it, and get commitment to build that, and hope it works.\nIf we lead with an outcome, we can measure progress towards that outcome while we are building and incrementally releasing, if we are not seeing progress with one approach, we can stop early and explore different solutions. Conversely, if we set a measurable target condition, we might achieve that goal after completing 20% of the planned solution; that allows us to move onto the next problem rather than building 80% more solution.\nOutcomes are easier to describe Outcomes are easier to describe on the road map to non-technical stakeholders (customers, marketing, sales, executives). Once you put a solution on the road map, you are going to start all discussions with the name of the solution, then backtrack to explain what the problem you are trying to solve, then you\u0026rsquo;ll move forward to discussing the solution you\u0026rsquo;ve selected.\nInstead if you tell your customer that you are focused on increasing the productivity of their systems administrators by streamlining workflows for data export, they can immediately grasp the value of that. They don\u0026rsquo;t need to know anything about how the product works to know that they would like their staff to be more efficient. They also don\u0026rsquo;t need to spend time understanding your solution in order to decide if it is actually going to solve their problem.\nIf the stakeholder asks for details you can discuss the targets you\u0026rsquo;ve selected, why you chose that target over others, why you thought this was the most important problem. These discussions and their feedback will help draw out more information about the problem and improve your overall solution. Again, because you haven\u0026rsquo;t committed to a specific solution, you can integrate all of the feedback right away.\nStay light on your promises in progress Once you start telling stakeholders that you are going to build a particular solution, they (reasonably) are going to start expecting that solution to materialize. They have their hopes up that you are going to get something to them, if you\u0026rsquo;ve really gotten out over your skis you might have also told them that you are going to get it to them by a certain date (for shame).\nThe best thing that can come out of that situation is that you have to explain to them that you changed priorities, or learned that you needed to take a different approach to the problem. In that case you are back tracking from the solution to the original problem (where we should have started). In the worst case, they signed a deal with you because you made the promise to build a particular solution. They (and your finance department) won\u0026rsquo;t be happy until they have it. Revenue recognition is a challenge.\nThere is still solution planning None of this eliminates the detailed work of planning and designing solutions. Part of prioritization is that we should be evaluating impact and effort to solve problems. Once a problem is selected we are going to do multiple rounds of design, engineering and customer evaluation. We are going to talk to customers about the things we are building in order to get feedback. None of that goes away.\nBut when we are selecting things for our engineering teams to work on, we should be selecting the most important problems that we can solve, not a solution. We should defer and distribute detailed solution planning to the people who are going to be closest to solving the problem, and leave them as many options as possible to solve that problem.\n","permalink":"https://www.nortrup.dev/posts/product-management/2020-11-16-outcomes-first-roadmaps/","summary":"\u003cp\u003eI\u0026rsquo;m sure if you\u0026rsquo;ve talked to me recently you\u0026rsquo;ve heard my song and dance on outcomes based road mapping.  As I\u0026rsquo;ve been talking about it over the past few weeks something really clicked for me on why it\u0026rsquo;s so important to identify the outcomes early in the definition of an idea.\u003c/p\u003e\n\u003cp\u003eWhen you are trying to get work prioritized and on the road map, it\u0026rsquo;s straightforward to start with a name for the solution that conveys meaning and then find supporters who also like the sound of the idea.  An easy default is to talk about the solution you are proposing to fix a problem.  They go together to help form a narrative story that works well in a meeting.  We have this problem, and here is the solution!\u003c/p\u003e\n\u003cp\u003eWhile this is really appealing, it also leaves us some challenges on the backend.  If we prioritize problems with a measurement of what we are going to achieve better alignment on why we are trying to solve this problem, and allow ourselves more freedom to discover the right solution.\u003c/p\u003e","tags":["Product Management","Roadmap"],"title":"Outcome First Roadmaps"},{"content":"If you start building an enterprise product eventually you are going to get asked to start building integrations with other enterprise products. This is ultimately an essential evil. Your customers already have a host of enterprise products handling the rest of their workflow. Your product is looking to do something with data coming from or going to another part of the business workflow. No one wants to reenter all of their data into a new system by hand, you need to be part of the ecosystem.\nWhen your product is early, you\u0026rsquo;ll be tempted to build point integrations. Early customers will have a product, it\u0026rsquo;ll probably be from a major technology vendor, you might even be using the same product in your infrastructure. You\u0026rsquo;ll go out, you\u0026rsquo;ll learn some APIs you\u0026rsquo;ll figure out how to batch some data back and forth. Problem solved, deal closed, happy customer. Your next customer comes along and you get another request for another integration point. You\u0026rsquo;ll build that one too. After a few of these you\u0026rsquo;ll decide to build an \u0026ldquo;extensibility system\u0026rdquo; or a \u0026ldquo;module system\u0026rdquo; or \u0026ldquo;app framework\u0026rdquo; to make it easier to build first and third party extensions. People in your organization will dream of becoming a platform. You\u0026rsquo;ll start putting things on the road map for your platform ecosystem. But before the app marketplace really catches on you need to seed the environment with the first apps. Now you are going out and finding the integrations people might want.\nYou should stop now.\nThis road is a road to a feature factory that you cannot get to run fast enough to keep up with. Every single integration that you build in this model creates more and more obligations, and will produce more and more tech debt than you want to pay, all by itself. Each and every product that you integrate with has their own road map. They are building new features all the time, they will eventually update their API to support the new things they are building. Once they update their API the clock is ticking for you to update your integration to match. You now have other products putting an obligation on you. You have surrendered the initiative, and you have lost some ability to maneuver.\nSoon you\u0026rsquo;ll be committing resources nearly full time to keep up with the changes in other people\u0026rsquo;s products. Some things you won\u0026rsquo;t want to keep up, the customer who originally asked for the integration will no longer be with you, or the integration is no longer ascendant or strategic. But you have it and it\u0026rsquo;s on the website, and a customer or five are using it still. It will bite your ankles until you drop support. Dropping support is hard and not really supporting something you haven\u0026rsquo;t actually stopped supporting is a bad look.\nI\u0026rsquo;ve been in an organization that had a team that was literally called the \u0026ldquo;add-on factory\u0026rdquo;. Full time engineers by the dozens that were expected to keep up with all the partners that weren\u0026rsquo;t building their own integrations.\nAlso beware of building your platform play too early. Understanding where your software is going to go is hard, even having more than a few customers or partners building on your platform can sap your ability to change and adapt. If you change your platform integration pattern you have now put all of your partners into the trap that you are trying to avoid yourself. And the slower they are to adapt your new pattern the longer you need to keep the old one around.\nWatch the Transforms When you start collecting multiple integrations, you will have temptations to build features to shape the data coming into or out of your system. Filters, formats, new items filters, deduplication, and at least once delivery. These are all great, but they add on complexity that you might want to externalize into another system to process. Depending on the level of assurance that you want to offer that you are doing these things right you can find yourself with hard computer science to do them right. I\u0026rsquo;m willing to bet that in most cases doing them is not core to your business. If they were core to your business it\u0026rsquo;s likely they are your business and not an add-on integration.\nConstraints to consider   Web standards. You can\u0026rsquo;t get yourself into too much trouble moving or reading data from web standard technologies. Supporting web standards will usually make you friends with customers who have a bent towards open source. Depending on how well adopted the standard is there will be more library support in all the colors of the programming rainbow.\n  Buffers. You usually have the option to write directly to the other technology or write to a buffer that the other technology already knows how to read from. Disks are the simplest version of this. You write some files out to disk, \u0026lt;other software\u0026gt; reads the data from disk using their \u0026ldquo;extension framework\u0026rdquo; and processes it. If you think a little more web-scale you can write to S3 or any number of S3 API compatible services and have other services read from that bucket. Buffers also allow for things to get picked up by automated hooks. Kinesis reads every new file written to a bucket and puts the objects into a data pipeline, and you are off to the races.\n  Integration Partners. There are a host of integration tools out there in the world, from big expensive systems like MuleSoft that have adoption as a corporate priority on their own. On the lighter side you have offerings like IFTTT, Zapier, Microsoft Flow. These have the advantages of you write a few triggers and a few actions and you get access to lots and lots of potential integration points and some level of data transform tool. The downside of these is you may not always have customers who are willing to buy your product and also buy those services too.\n  Build the simplest data pump possible. When you start pulling and pushing data keep the mechanism of pumping and pulling data as simple as possible. Pick some data formats that line up with as many of the targets as you can; honestly start with JSON. Add more only when you absolutely have to. Keeping it simple until it really hurts to do otherwise. Be willing to put some hard limits on how you are willing to transform or process data. Give them some options of how they could use other tools to build their Rube Goldberg machine themselves. If you are going to be part of a Rube Goldberg data processing pipeline, try to be only one step.\n  Limits. You want to put limits on how much data you are going to push or pull through the system. Think about how you are going to limit the use of the use of the integration. Are you supporting streaming or batch processing? If you are streaming, then think about the rate that you want to support, think about the hardware required to keep that stream flowing. If you have a batch system, how often can you batch, how many concurrent batches will you support, how much data can be in each batch, what version of cron string are you supporting for batch scheduling. All of this will shape your system architecture and eventually cause you pain if you don\u0026rsquo;t put limits on them early. Better to say you will only work up to a point early and then grow that number than put no constraints on it and spend support hours trying to solve your customer\u0026rsquo;s scale problems, and building a scale testing tool.\n  Build the integration. If the integration is truly strategic you should build it. If you are adjacent to a market segment with dominant leaders in the Forrester Wave or Gartner Magic Quadrant, then your best option might be to build a real first class integration. Be a little skeptical when you hear the request, think if you have good options to utilize web-standards or integration partners to stay a little decoupled. But if you are going to build the integration it should be foundational for selling your product for the next 1 to 3 years.\n  ","permalink":"https://www.nortrup.dev/posts/product-management/2020-09-28-enterprise-integrations/","summary":"If you start building an enterprise product eventually you are going to get asked to start building integrations with other enterprise products. This is ultimately an essential evil. Your customers already have a host of enterprise products handling the rest of their workflow. Your product is looking to do something with data coming from or going to another part of the business workflow. No one wants to reenter all of their data into a new system by hand, you need to be part of the ecosystem.","tags":["Product Management","Enterprise Products"],"title":"Enterprise Product Integrations Journey"},{"content":"Military officers interested in moving into technology should consider careers in Product Management. There are strong parallels between the roles and product management requires many of the skill sets that effective officers have developed in their time in the service. But believing that you would be a good product manager and actually getting your foot in the door for an interview is another story.\nWhen applying for roles, I recommend listing your experience in the military as a Product Manager rather than as a \u0026ldquo;Company Commander\u0026rdquo; or \u0026ldquo;Platoon Leader\u0026rdquo;. This will give recruiters and hiring managers something that they are familiar with on your resume and will allow you to open the conversation about how the roles are similar and you are trained for it. It is much better to have a conversation with a recruiter that starts with \u0026ldquo;I didn\u0026rsquo;t realize that the military had Product Managers\u0026rdquo;, to which you can answer, \u0026ldquo;Well my official title was Platoon Leader, but let me tell you about how the roles are very similar\u0026hellip;\u0026rdquo; The alternative is that you don\u0026rsquo;t have any conversations because the recruiting software is literally looking for the words \u0026ldquo;Product Manager\u0026rdquo; in the job titles of your resume and you get filtered out.\nBut one question that I struggled with was how to level myself into product management roles. This applies for both for listing your prior work and for what roles to apply into. Thankfully there is some great guidance from Melissa Perri. In her book Escaping the Build Trap: How Effective Product Management Creates Real Value she has this great chart (for organizations greater than ten product teams):\nSource: Twitter\nBased off of this framework I would recommend the following Army Roles to PM level Mappings. I’ve added some color commentary to help illustrate the parallels and support your conversations.\nAlso, when you are making the jump, expect that you might need to go down a level from what you were doing in the military to what you will do in a civilian company. You are changing industries and disciplines and that is going to get reflected somewhere. That shouldn’t prevent you from applying for roles that are at your current level. I applied for a Sr. Product Manager role at Splunk when I was hired and was hired into that role as a Product Manager to reflect my lack of experience in enterprise software.\nAssociate PM \u0026lt;=\u0026gt; Second Lieutenant (O1) Associate PM  Tactical - Focused on a specific feature they are building right now, speaks mostly with the design and engineering team for that feature. Talks to a few customers who are currently or potentially using that feature. Leans heavily on their engineering lead and a senior PM mentor for guidance. Operational - Understands what other PMs in their portfolio team are working on. Strategic - Understands where to find the organizational level road-map, could talk through their place in that road-map.  Second Lieutenant (O1)  Tactical - Understands the capabilities of their platoon or section. Has strong knowledge of their specific equipment systems and is learning how to employ them effectively with guidance from company commander and platoon sergeant. Working off a checklist to make sure that troops, training and equipment are ready for events on the short term training calendar. If working on a staff as an assistant, they are waiting until there is a Platoon Leader seat available; usually spending their time learning what is happening from one of the NCOs or CPT staff assistants in order to be more ready when they get down to a platoon. Operational - Can explain the higher unit\u0026rsquo;s intent two levels up for today\u0026rsquo;s tasks. Strategic - Has seen the battalion level long range training calendar, knows that they are going to the field in 3 months, still not sure what to pack.  Product Manager \u0026lt;=\u0026gt; First Lieutenant (O2) Product Manager  Tactical - Has end to end responsibility for a modest feature or portion of a product. Expected to have ideas about how their area of responsibility could be improved to support larger company objectives, but needs to get approval before building them. If they are running experiments they are limited in scope so they don\u0026rsquo;t get to far along without getting confirmation from a more experienced product leader. Operational - Understands and can competently brief the road-map for their product portfolio\u0026rsquo;s current and upcoming work, is able to nest their explanation inside of the goal and objectives for the organization two level\u0026rsquo;s up. Strategic - Can explain the company direction to customers, knows enough to only speak in detail about their portion of it. Frames decisions for their product inside of the goals several levels up the organization.  First Lieutenant (O2)  Tactical - Understands how most of the systems in the company are employed and what the interface points are in adjacent companies and the support battalion. Can run single day training events like small arms ranges competently with limited supervision. Operational - As a senior platoon leader or executive officer works with battalion staff to get the company ready to participate in battalion or brigade level training events. Will manage the details of executing line-haul operations, arranging convoy operations to training centers. Understands how events on the short term training calendar build readiness for events on the long term training calendar; can explain this effectively to troops. Strategic - Understands the sequence of events on the long term training calendar through red/amber/green phases, progressive training events from individual to team, platoon, company and up work together.  Senior Product Manager \u0026lt;=\u0026gt; Captain (O3) Senior Product Manager  Tactical - Responsible for a larger portion of product than a product manager, potentially responsible for multiple products or features. You are expected to shape the near and mid-term direction for that product. You are competent in the day to day work of talking to customers, internal stakeholders and the design and engineering team, no one is checking your work for these activities. You still spend most of your time focused on design and execution of your product, but are also building out a longer term road-map for your product(s). Operational - You have enough experience to start recommending items for the mid-term road-map for the portfolio level. You are expected to start synthesizing the conversations with multiple customers into a consistent narrative about how customers experience your product including their pain points and favorite features. You spend time communicating this narrative to your portfolio team and other internal stakeholders. Strategic - You understand the organizational goals and objectives, you are able to effectively communicate this to customers and understand when customers you talk to are understanding and agreeing with or pushing back on that vision. You can explain how your portfolio team\u0026rsquo;s work contributes to organizational level goals both now and in the \u0026ldquo;next\u0026rdquo; time horizon.  Captain (O3)  Tactical - As a company commander you are expected to have mastery of the employment of all of the systems in your company and care of up to a hundred Soldiers and all of their equipment which you are personally responsible for. You spend most of your time actually doing that supervision. You don\u0026rsquo;t spend as much time doing actual work but mostly supervising that tactical activities are being planned and executed correctly. You are writing your own short term training calendar, and your feedback about the status of your organization are used to determine what goes on the long-term training calendar. You can effectively coordinate with other company commanders and the battalion staff to ensure that your company has all of the resources it needs to execute your mission (even if that is mostly telling your XO to do the grunt work). As a battalion staff primary or assistant to the S3 you are ensuring that all of the tactical operations being done across the battalion have the right level of support from your staff function, and that the companies have in fact done what they need to do based on orders that have been sent out. You spend a lot of time thinking about how you can help the companies complete the mission and put as few constraints on them as possible. Operational - You are setting the agenda for the short term (six to eight week) schedule based on your detailed understanding of the long range plan for the organization two levels up. You are making mid-course corrections to make sure that your team is ready for future events. You work with battalion and brigade staff to set expectations about what is going to be possible in the mid-term based on where you know your organization is today. You are primarily looking to make sure you don\u0026rsquo;t get asked for unreasonable things in the near future. Strategic - You understand the long range training calendar in detail, you are expected to be able to brief higher headquarters your readiness to perform at upcoming events and to explain what challenges with personnel, equipment or training might impact your performance at events on the long range calendar.  Director of PM \u0026lt;=\u0026gt; Major (O4) Director of PM  Tactical - You might still have a team that you are managing personally either because you genuinely like hands on product management or you want to keep your skills sharp or tell yourself it\u0026rsquo;s a particularly important piece, or maybe there just isn\u0026rsquo;t anyone else to do it right now. But it had better be a high functioning team because you won\u0026rsquo;t have as much time for them as you like. You use your experience and skills at the tactical level to help council and unblock the more junior PMs who are now reporting to you. Operational - You are now responsible for a portfolio of different products with three to five PMs reporting to you each with different products. Your job is to make sure that all of the work that they are doing is coherent and in-line with company priorities, you do that by helping to select and what items from each of the teams go onto the road-map by supporting each team\u0026rsquo;s discovery efforts as they work to solve the organizational level problems. You also work with your other portfolio leads to harmonize what you are doing across the larger organization. You are asked more frequently to support the field and sales teams by explaining the organizational road-map to customers in order to give them confidence that the R\u0026amp;D organization really has a vision for the future of the company and that something on that road-map effectively solves that customer\u0026rsquo;s problems. Strategic - You talk on a regular basis with internal stakeholders including the VPs of product, the Chief Product Officer and Chief Technology Officer about the problems you are hearing from customers and offering your suggestions about what could be done in both you portfolio and in other portfolios to help address those problems. You are also integrating what you are seeing across industry trends and helping the organization \u0026ldquo;skate to where the puck is going to be\u0026rdquo; (the Gretzky quote that will inevitably be trotted out); in a nice change of events these stakeholders are listening to you and sometimes passing your insights off as their own at later meetings.  Major (O4)  Tactical - You used to do tactical things, you can still show up at a training event and tell an E5 that they are doing that thing wrong with a spot correction, but for the most part you are interested in the output of tactical tasks getting done. You use your experience to help council the junior officers fix problems. Operational - You are an iron major, you send a lot of email trying to coordinate the actions of multiple heterogeneous organizations in order to get them all moving in the direction of the commander\u0026rsquo;s intent. If you are the XO you are wrangling all of the support functions to make sure that nothing in the logistics realm gets in the way of the short or long term plan. In order to do that you are almost always working across organizational lines to help connect people in your unit with problems with people in other units who might have the resources to help fix those problems. If you are the S3 you are trying very hard to find a sequence of events that turn the commander\u0026rsquo;s intent into a sequence of events that ends in results and doesn\u0026rsquo;t require breaking the time space continuum. You run a multi-team planning operation continuously. Strategic - You understand the strategic plan intimately, and give feedback on what needs to change in order to get it to work, you probably can\u0026rsquo;t move some of the bigger rocks on the long term plan (no one moves an NTC rotation), but if you do it right you might be able to shape what the commander tells the trainers at NTC that the unit needs to learn at NTC. You absolutely will help your boss and his boss understand what the all up capabilities of the unit are before they get to NTC so that no one is surprised at how good or not you are.  VP of Product \u0026lt;=\u0026gt; Lieutenant Colonel (O5) VP of Product  Tactical - You interact with tactical product management when it shows up at a portfolio review and you have some feedback about where the buttons are placed and ask if this is in line with the latest design language. If you are doing actual tactical product management, you are probably also trying to hire some folks so that you don\u0026rsquo;t have to do it anymore, not because you don\u0026rsquo;t love it, but because it probably isn\u0026rsquo;t the best use of your time. Operational - You spend a lot of time in meetings with directors of product management reviewing their portfolio road-map plans and progress. You are helping to point out misalignment between what is being said in this meeting and the meeting you just left and telling those folks they need to get together and figure it out. You influence the same directors of product management by reiterating over and over the themes and goals consistently so that everyone is repeating them in their sleep much to the displeasure of their spouses. Strategic - The rest of your time you spend talking to folks in the C-Suite of the company about how your organization is solving their problems or how the problems you are hearing about from customers should be the problems your C-Suite is paying attention to more. You have been doing this long enough that the \u0026ldquo;industry leaders\u0026rdquo; are probably people you have worked with in other companies, you spend some time talking to them to help keep a finger on what is up and coming in other parts of the market that you could be expanding into getting ready to adapt to.  Lieutenant Colonel (O5)  Tactical - Shows up to the range to qualify on their assigned weapon. Operational - Will we have sufficient personnel in the unit with the right skills in order to complete all of the missions in the next six months; if we don\u0026rsquo;t can we find people to train or other units to support us. Strategic - What do we think the operational environment in Afghanistan will look like in 18 months, what do we need to train on at the training center in 9 months in order to be prepared to deploy there?  Chief Product Officer \u0026lt;=\u0026gt; Colonel (O6) Chief Product Officer  Tactical - Can explain what was just shipped and what problems are being solved in the \u0026ldquo;now\u0026rdquo; column at the portfolio level. Operational - Reviewing proposed customer experience metrics for the next six months and getting executive buy-in for metrics that we want to move in the next six months. Strategic - Spends time with customers, analysts, industry thought leaders attempting to actively shape what people think about the industry and your market.  Colonel  Tactical - Knows where the range complex is, can cite numbers about how many Soldiers are qualified. Operational - Strategic - Lobbies for particular deployment slots because they want to prove their new and innovative way of deploying their particular type of brigade combat team effectively to finally win the argument they had at the war collage and pre-command course.  ","permalink":"https://www.nortrup.dev/posts/product-management/2020-06-06-military-to-pm-levels/","summary":"Military officers interested in moving into technology should consider careers in Product Management. There are strong parallels between the roles and product management requires many of the skill sets that effective officers have developed in their time in the service. But believing that you would be a good product manager and actually getting your foot in the door for an interview is another story.\nWhen applying for roles, I recommend listing your experience in the military as a Product Manager rather than as a \u0026ldquo;Company Commander\u0026rdquo; or \u0026ldquo;Platoon Leader\u0026rdquo;.","tags":["Product Management","Military"],"title":"Military to Product Management - Level Equivalents"},{"content":"Solid Pods (Personal Online Data Store) are an open source project from the efforts of Sir Tim Berners-Lee (creator of the original internet) with a goal of re-decentralizing the internet. This project is still in development, I think it has a lot to offer in order to help make developing web applications easier and safer for the developer, user, and society at large.\nSolid provides a web standard\u0026rsquo;s compliant API to provide the owner of the pod with an identity (WebID), storage (document store), and relational language for data. Applications can be built to access and store data in the pod, rather than in storage systems owned by the application.\nYou don\u0026rsquo;t want to store your customer\u0026rsquo;s data In the beginning there were web pages and they were good. Then customers wanted to have web pages that had data that was specific to them. The web portal was born it works but from a privacy standpoint it has been going downhill for customers and the companies that are storing this data.\nThe conventional wisdom is that storage is cheap, which makes it easy to store data about your customers. In today’s world you should be asking yourself, just because I can, should I. The real cost of data is in the liability of keeping it. The average cost of a data breach in 2019 was $3.29 Million.\nEven if you manage to keep all of your data under lock and key, you will face a growing number of privacy process challenges for the data. Right now any EU citizen can make a subject access data request to you through the General Data Protection Regulation (GDPR). Each of those requests are costing businesses on average $1400 per request to process.\nIt isn\u0026rsquo;t just the EU other countries and states are moving in that direction. Brazil\u0026rsquo;s privacy law closely matches the GDPR to stay inline with Portugal. Japan has adopted legislation that is also very similar to Europe. In the U.S. California has adopted the California Consumer Privacy Act (CCPA) and 40% of Americans are covered by some form of state privacy law. There is significant debate what shape a federal privacy law will take, but that is more about what type of law we get rather than if there will be a law.\nIf the actual administrative, legal and reputational risk of storing data isn\u0026rsquo;t enough; having large stores of data increases national security risks as well. As recently highlighted by the Cyberspace Solarium Commission report every website that becomes a target decreases the overall national cybersecurity posture. We already have large examples of IT systems at Marriott being attacked by likely state intelligence services in order to get a rich set of data about the travel patterns and personal preferences of Americans and particularly the U.S. government employees that stay in their hotels for work and pleasure.\nYou might tell yourself, this won\u0026rsquo;t happen to me. I run a tight ship and take security seriously. Don\u0026rsquo;t count on it. Every web connected anything is open to attack from well financed, trained and organized state and organized crime groups. There are more smart people out there with a motivation to attack you than there are engineers you can hire to protect yourself. Read enough Krebs on Security and you will realize that breaches happen to everyone, they happen to large smart companies and the folks who thought they were small enough to fly under the radar.\nThe safest way to live is to have nothing to steal How do Solid Pods help solve this problem? Right now identity on the internet looks a lot like this:\nNo individual has a standardized identity on the internet or storage system, each website forces you to create a new one every time. Even worse, many web-sites have to implement storage of these identity systems from scratch. Many of the big players (Google, Facebook, Apple, Microsoft, etc.) have allowed you to federate authentication using their existing identities, but that requires you to share data with those companies about who is using your service, frequently feeding them the data on how to compete with you. You can (and probably should) pay for someone else who has implemented identity systems already (Auth0, Okta, etc), doing it yourself is not advisable.\nRegardless of how you implement it, every web-site you go to forces you to create another identity, password and slowly collects some amount of data about the user. That data is likely repeated over and over for every website. You enter your shipping and billing addresses from every commerce transaction, then have to update those when you move. I moved more than a year ago and am still finding websites that still have my old address listed. I still get mail at my house for the old owners. Your data is in bits and bobs all over the internet.\nI love 1Password (really you should use a password manager); but the fact that I have a product to keep track of and secure 389 logins that I\u0026rsquo;m aware of on the internet right now, is an indication that the internet is broken.\nIt. Doesn\u0026rsquo;t. Have. To. Be. This. Way. In a world with Solid the internet instead looks more like this:\nYou have one identity, provided by your solid pod. When you go to a web-site you grant it permission to show you your data from your pod. When you leave the website, they no longer have access to your data. Even better when you go to a new website, you don\u0026rsquo;t have to re-enter all of that data, you have already filled in the shipping address field on your identity, applications can simply read that.\nThe underlying technology is still early and has some clear growing that it needs to do. But I think it offers an interesting potential solution for both enterprise and consumer software.\nIn the Enterprise data owners get a big step forward in data ownership and control. You have to trust your SaaS vendor less when you own and control the data. For developers it provides an opportunity to move enormously difficult parts of every compliance attestation, outside of your compliance boundary.\nRight now if you want to avoid getting a PCI attestation, you use Stripe, you never touch the credit card data and avoid a boat load of problems. If you applied the same theory to user authentication, authorization and data storage, you could eliminate entire categories of compliance problems.\n Encrypting data at rest, nope you never touched the data. Backups, nope never had anything to backup. Backup restoration testing, all I need to do is redeploy the single page app.  A smaller compliance boundary means that you can gain attestation with less effort for significant payoff. Many enterprise customers won\u0026rsquo;t talk to you unless you have at least an ISO-27001 cert, and that is the bottom rung. Every standard you add on opens your potential customer base more.\nOn top of that you no longer need to invest in building or integrating then operating and monitoring the systems that are required for authentication, authorization and storage. That means you can move faster on core product improvements and either charge less or have improved margins.\nFor consumers software Solid allows you to significantly minimize the regulation of consumer privacy on your business. In the ideal world, when a user shows up to your site, the only thing you know about them is the address of their pod, even that could live in their browser.\nSimilar enterprise software you now get to focus on your product rather than lots of web-scale infrastructure and the engineers required to maintain that infrastructure. Ben Thompson of Stratechery has written extensively about the impact of regulation to reinforce the position of the Big Cos. The short version is that everyone collects data on their users, the data gets mis-used by the big companies, governments create regulations with the intent of making sure the big companies behave and user privacy is respected. The outcome however is that you need a lot of infrastructure, legal and investment to follow those rules. Meaning big companies are in the best position to make those investments and everyone else goes away because they can\u0026rsquo;t afford to follow the regulation and build a product.\nIf you don\u0026rsquo;t have any data, you don\u0026rsquo;t have to pay as many lawyers or compliance engineers, and you aren\u0026rsquo;t actually running the infrastructure to store the data, then your operations cost just went way down. Lower costs make you more competitive. Yay!\nOther tricks There are some other tricks in the Solid universe. If a user has all of their data in one location multiple apps can re-use and enrich the same data. This helps solve some portability problems and potentially decrease time to value for your users. There is also a rich and extensible language for defining relationships between pods. Meaning you can create social relationships without having to tap into Facebook.\nThe way ahead - Chicken meet Egg Solid might be nice tech but it is going to need some decent applications. Before people use the application they will need to get a pod. There are currently some applications, but most of them appear to be more playground work than production ready.\nIn order to use the applications, users will need to have a solid pod. The pod providers are going to be picking up the responsibility for securing your data, I personally would want the pod provider to have their compliance ducks in a row. My personal preference would be to know that my pod provider can\u0026rsquo;t read the contents of my pod, that all pods are cleanly separated, plus all of the backup and restoration things.\nThere are currently a smattering of providers, but none of them quite feel like something I would pay for yet. Inrupt\u0026rsquo;s own service lists itself as a prototype. ¯\\_(ツ)_/¯\nI could see some of the following companies being strategically aligned with adding a pod hosting option to their services.\n Identity Provider solutions (Auth0 or Okta) are already in the authentication technology space and already have strong relationships with the enterprise software landscape. Adding Solid would be an extension that would allow them to serve more of their customer needs. And provide an OAuth + Solid developer pattern in addition to an OAuth + SCIM pattern that is common today. Password Managers (1Password, LastPass, Dashlane) are already in the business of selling users secure containers for their most personal data. They also have some Enterprise and SMB relationships. Add Solid would extend their ability to contain more data than just passwords for their users. Apple has made a particular strategic lift in the past several years to make themselves the company that cares about your privacy and data. Most significantly they added Sign In with Apple for login. Adding Solid support would allow them to add a developer layer on top of iCloud storage that provides more privacy protection than an obfuscated user id. AWS/Azure/GCP - If you were a business looking for a Solid provider, then you would probably hope that one of these companies provides it. They probably already hold a bunch of data for you, and they are highly competent at running data centers.  ","permalink":"https://www.nortrup.dev/posts/technology/2020-05-13-solid-pods/","summary":"Solid Pods (Personal Online Data Store) are an open source project from the efforts of Sir Tim Berners-Lee (creator of the original internet) with a goal of re-decentralizing the internet. This project is still in development, I think it has a lot to offer in order to help make developing web applications easier and safer for the developer, user, and society at large.\nSolid provides a web standard\u0026rsquo;s compliant API to provide the owner of the pod with an identity (WebID), storage (document store), and relational language for data.","tags":["Technology","Open Source"],"title":"Solid Pods - A better place to store user data"},{"content":"I made a career transition into Product Management four years ago. Prior to starting my first role at Splunk as a line level Product Manager my previous experience was in the U.S. Army. I didn\u0026rsquo;t know that product management was a career field option when I started my job search, and as I look back on it I\u0026rsquo;m amazed I got any interviews at all. I had no meaningful experience building software, and I made some blind assertions that I had qualifying experience as an Army Officer. I still maintain that those assertions holdup, and I think most companies would do well to hire more Junior Military Officers as Junior Product Managers.\nOnce I managed to find a job, I\u0026rsquo;ve faced the task of educating myself on the craft of product management. I\u0026rsquo;ve long been a person who learns well through self-study. I blame the Army that taught that professional development was 1/3 on the job, 1/3 in the classroom, and 1/3 personal development. It\u0026rsquo;s also possible I\u0026rsquo;ve just always been a nerd.\nBelow you will find a list of books, blogs and podcasts that I\u0026rsquo;ve read and strongly recommend. If I were hired or tasked to start an associate product management training program at a company. Most of the content here would constitute my curriculum. Now you can have the benefit of that without having to listen to me lecture.\nBut what about all those posts on Medium? I tend towards books rather than the plethora of Medium posts because I think you can find lots of half-baked things on medium. I personally have published on Medium in the past (and now write here using GitHub Pages), and opined on my views of what product management is to me. But I\u0026rsquo;m a bit of an institutionalist and I tend to give some more credence to folks who gone through the effort of getting something formally published. Continuing to read on the internet is great, but I think it can be a bit hard to follow if you are trying to establish some foundations. I do have some folks that I read on a regular basis, so their is a section on blogs worth following.\n Affiliate Note: Where I link to books on Bookshop or Amazon, I am using affiliate links, because they might as well pay me for sending traffic their way. I strongly recommend checking your local library for copies of the books.\n What is the job This section includes several great books to get started understanding what product management is. If you haven\u0026rsquo;t worked somewhere that has product managers as a role, start here. Also start here if you feel like people keep saying things about what product managers should be doing and they don\u0026rsquo;t all quite make sense.\nEscaping the Build Trap: How Effective Product Management Creates Real Value From the author:\n To stay competitive in today’s market, organizations need to adopt a culture of customer-centric practices that focus on outcomes rather than outputs. Companies that live and die by outputs often fall into the \u0026ldquo;build trap,\u0026rdquo; cranking out features to meet their schedule rather than the customer’s needs.\nIn this book, Melissa Perri explains how laying the foundation for great product management can help companies solve real customer problems while achieving business goals. By understanding how to communicate and collaborate within a company structure, you can create a product culture that benefits both the business and the customer. You’ll learn product management principles that can be applied to any organization, big or small.\n Andy\u0026rsquo;s take: I think this is probably the best book I\u0026rsquo;ve read on what Product Management is. It explains it clearly if you are learning how to interface with product management for the first time, if you are trying to build a product management organization, or want to understand how product management organizations are structured and organized to be effective and focused on customer problems.\nIf you want to get the essential understanding of what product management is, start here.\nProduct Leadership: How Top Product Managers Launch Awesome Products and Build Successful Teams From the author:\n In today’s lightning-fast technology world, good product management is critical to maintaining a competitive advantage. Yet, managing human beings and navigating complex product roadmaps is no easy task, and it’s rare to find a product leader who can steward a digital product from concept to launch without a couple of major hiccups. Why do some product leaders succeed while others don’t?\nThis insightful book presents interviews with nearly 100 leading product managers from all over the world. Authors Richard Banfield, Martin Eriksson, and Nate Walkingshaw draw on decades of experience in product design and development to capture the approaches, styles, insights, and techniques of successful product managers. If you want to understand what drives good product leaders, this book is an irreplaceable resource.\n Andy\u0026rsquo;s Take:\n The Authors are Pillars of the product management community. As the collective founders of Mind the Product they represent an enormous mind-share about what it means to build products in today\u0026rsquo;s software ecosystem. I love that this book takes a broad vision of what a product leader is. There can be a tendency to draw sharp lines between people by title and what they do. (Engineering Managers and Engineers should stick to engineering and Product Managers think about product things!) This book is more inclusive and I think represents reality better, Product Managers, Engineers, UX/UI, Docs are all part of the Product Leadership team of a company. They do a great job talking about what it means to do product at different sized and staged companies. Startups, mid-sized companies, and enterprise companies all have a very different feel, they work in different ways. Reading this section of the book if you are trying to break into product management is a good way to understand what kind of company you are looking to apply to.  Building Products for the Enterprise: Product Management in Enterprise Software From the author:\n If you’re new to software product management or just want to learn more about it, there’s plenty of advice available—but most of it is geared toward consumer products. Creating high-quality software for the enterprise involves a much different set of challenges. In this practical book, two expert product managers provide straightforward guidance for people looking to join the thriving enterprise market.\nAuthors Blair Reeves and (Benjamin Gaines)[https://twitter.com/benjamingaines] explain critical differences between enterprise and consumer products, and deliver strategies for overcoming challenges when building for the enterprise. You’ll learn how to cultivate knowledge of your organization, the products you build, and the industry you serve.\n My first (currently only) experience in software is in Enterprise Software. So I was thrilled to learn that there was a book specifically about building products for Enterprise Software. In this case Enterprise Software is referring to the companies you are trying to sell to, not so much the type of company you are. There are plenty of startups and mid-sized companies that are trying to sell to Enterprise Customers. But selling to an Enterprise customer has very distinct sales motions, support requirements, cadences, that are, as far as I can tell, nothing like consumer products.\nThis book has a great overview on how to work with the many different parts of this process. Understanding who you are building for, how your organization works, how to think about your industry. Read this if you are going to be selling to companies, particularly big ones, rather than individual people.\nAs a final note I also like Blair, he\u0026rsquo;s got a strong twitter game, an occasional newsletter, and we\u0026rsquo;ve become somewhat Twitter friends. He has a much bigger following than me, but we\u0026rsquo;ve corresponded multiple times and he\u0026rsquo;s always genuine and smart. Be aware that his twitter goes overtly political quite often, which is fine with me, but truth in lending if you want just the product stuff.\nMethods and tools User Story Mapping From the author:\n User story mapping is a valuable tool for software development, once you understand why and how to use it. This insightful book examines how this often misunderstood technique can help your team stay focused on users and their needs without getting lost in the enthusiasm for individual product features.\n Andy\u0026rsquo;s take:\nUser story mapping is by far my favorite design technique. I use it whenever I get the opportunity. I find that it provides a clear and easy way to communicate what the user is trying to accomplish. It helps visualize the flow, discuss sequencing and priorities and does a great job of drawing out missing steps. I also love that the technique is easy to explain and understand. It\u0026rsquo;s simple to implement, while there are tools out there to build a story map, I\u0026rsquo;ve also effectively built story maps in a spreadsheet so that I could project it when I\u0026rsquo;m working with distributed teams or multiple co-located teams in different cities.\nAlso Jeff Patton is a giant the industry, when he speaks or writes something I perk up and listen (see the recurring resources)\nThe North Star Playbook John Cutler is one of the most prolific writers I know on Product Management, his newsletter is further down the list of continuing education. At the time of writing he works at Amplitude which is a tool focused on helping Product Managers understand how users use their products. Working with his peers at Amplitude they\u0026rsquo;ve written this terrific guide to picking strategic metrics. Having a clear strategic metric can be incredibly grounding for a team and helps tremendously when you are trying to prioritize work with your teams. It gives you the magic power to say to a stakeholder a clear articulation of why you prioritized one thing over another.\nThe Product is Docs: Writing technical documentation in a product development group Lean, Agile and DevOps Most of the software development world will claim to apply some form of Lean and Agile methodology. You will never show up to a company that brags about their waterfall development methods. Some might admit that they are still transitioning or admit that there are constraints that prevent them from being more agile (government contracting struggles with this). But having a good understanding of what \u0026ldquo;Agile\u0026rdquo; is, will help you as a product manager.\nAt its highest level I tend to think of Agile as applying Lean principles to IT and software development. Lean was first developed by Toyota in their famed Toyota Production System. Encouraging continuous and early learning, small batches and empowering individuals throughout the system to point out defects and areas for improvement. Thankfully there are some great texts out there.\nFoundational to Agile in software is the Agile Manifesto. It\u0026rsquo;s short and easy to read in less than 30 seconds, but like a zen koan, you can spend a lot of time thinking about and working on the implications. A lot of Agile is built upon the practices of Extreme Programing.\nAccelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations From the author:\n How can we apply technology to drive business value? For years, we\u0026rsquo;ve been told that the performance of software delivery teams doesn\u0026rsquo;t matter―that it can\u0026rsquo;t provide a competitive advantage to our companies. Through four years of groundbreaking research to include data collected from the State of DevOps reports conducted with Puppet, Dr. Nicole Forsgren, Jez Humble, and Gene Kim set out to find a way to measure software delivery performance―and what drives it―using rigorous statistical methods. This book presents both the findings and the science behind that research, making the information accessible for readers to apply in their own organizations.\nReaders will discover how to measure the performance of their teams, and what capabilities they should invest in to drive higher performance. This book is ideal for management at every level.\n Andy\u0026rsquo;s take:\nDon\u0026rsquo;t read anything else until you read this. Stop reading this page right now and read this book. I\u0026rsquo;ll wait, this book is that important. Almost nowhere else will you find such a definitive, clear and well researched book to demonstrate the actual measurable value of adopting Lean/Agile/DevOps practices in your software development. This book comes complete with years of research, flow charts and suggestions on how to avoid burning your teams out, develop software better, and deliver value faster.\nThe best part of this book is that they boil all of the knowledge down into four clear, measurable metrics that you can use right now in your business to understand how well your team and your process stack against the rest of the industry. Not only do these give you an understanding if you are a low, moderate, high, or elite team in the industry, they give you great chart to visualize how to get there.\nAlso follow Nicole Forsgren on Twitter, always smart things, sometimes funny things, and frequently things to remind you about blindspots in the industry for diversity and inclusion.\nThe Goal: A Process of Ongoing Improvement From the author:\n Written in a fast-paced thriller style, The Goal, a gripping novel, is transforming management thinking throughout the world. It is a book to recommend to your friends in industry - even to your bosses - but not to your competitors. Alex Rogo is a harried plant manager working ever more desperately to try improve performance. His factory is rapidly heading for disaster. So is his marriage. He has ninety days to save his plant - or it will be closed by corporate HQ, with hundreds of job losses. It takes a chance meeting with a professor from student days - Jonah - to help him break out of conventional ways of thinking to see what needs to be done. The story of Alex\u0026rsquo;s fight to save his plant is more than compulsive reading. It contains a serious message for all managers in industry and explains the ideas, which underline the Theory of Constraints (TOC), developed by Eli Goldratt.\n Andy\u0026rsquo;s take:\nThis novelization follows an auto parts manufacturer, as they struggle to streamline production and save the business. This text is foundational and classic. So classic that my father, a manufacturing engineer, read it as part of his college courses many moons ago. But it holds up. Look past the fact that they are talking about building car parts not software, for our purposes they are not significantly different.\nThe Phoenix Project From the author:\n Bill, an IT manager at Parts Unlimited, has been tasked with taking on a project critical to the future of the business, code named Phoenix Project. But the project is massively over budget and behind schedule. The CEO demands Bill must fix the mess in ninety days or else Bill\u0026rsquo;s entire department will be outsourced.\nWith the help of a prospective board member and his mysterious philosophy of The Three Ways, Bill starts to see that IT work has more in common with a manufacturing plant work than he ever imagined. With the clock ticking, Bill must organize work flow streamline interdepartmental communications, and effectively serve the other business functions at Parts Unlimited.\nIn a fast-paced and entertaining style, three luminaries of the DevOps movement deliver a story that anyone who works in IT will recognize. Readers will not only learn how to improve their own IT organizations, they\u0026rsquo;ll never view IT the same way again.\n Andy\u0026rsquo;s take:\nThis book returns to Parts Unlimited (from the Goal), and tells a story of applying the same lean principles that saved the manufacturing business to the IT department. This is a great primer on what DevOps looks like in application.\nThe Unicorn Project From the author:\n This highly anticipated follow-up to the bestselling title The Phoenix Project takes another look at Parts Unlimited, this time from the perspective of software development.\nThe Unicorn Project, we follow Maxine, a senior lead developer and architect, as she is exiled to the Phoenix Project, to the horror of her friends and colleagues, as punishment for contributing to a payroll outage. She tries to survive in what feels like a heartless and uncaring bureaucracy and to work within a system where no one can get anything done without endless committees, paperwork, and approval.\nOne day, she is approached by a ragtag bunch of misfits who say they want to overthrow the existing order, to liberate developers, to bring joy back to technology work, and to enable the business to win in a time of digital disruption. To her surprise, she finds herself drawn ever further into this movement, eventually becoming one of the leaders of the Rebellion, which puts her in the crosshairs of some familiar and very dangerous enemies.\nThe Age of Software is here, and another mass extinction event looms—this is a story about rebel developers and business leaders working together, racing against time to innovate, survive, and thrive in a time of unprecedented uncertainty\u0026hellip;and opportunity.\n Andy\u0026rsquo;s take:\nThe final (or maybe most recent) installment at Parts Unlimited tells you the story of the evolution of their software development practices. The characters again learn to apply small batches, continuous integration and continuous testing to their application development practices. This is a great text to read what right should look like, as well as help you develop a sense of empathy for the developers on the teams you work with.\nThe Principles of Product Development Flow: Second Generation Lean Product Development  From the author:\n \u0026ldquo;\u0026hellip;the dominant paradigm for managing product development is wrong. Not just a little wrong, but wrong to its very core.\u0026rdquo; So begins Reinertsen in his meticulous examination of today\u0026rsquo;s product development practices. He carefully explains why invisible and unmanaged queues are the underlying root cause of poor product development performance. He shows why these queues form and how they undermine the speed, quality, and efficiency in product development. Then, he provides a roadmap for changing this. The book provides a well-organized set of 175 underlying principles in eight major areas. He shows you practical methods to: Improve economic decisions Manage queues Reduce batch size Apply WIP constraints Accelerate feedback Manage flows in the presence of variability Decentralize control The Principles of Product Development Flow will forever change the way you think about product development.\n Andy\u0026rsquo;s take:\nWhile product management is not project management (with a focus on throughput and timelines), a successful product manager will do a fair portion of project management as you manage the sequence of your backlog, work with the team to release work into development, and work on managing dependencies and handoffs when working on multi-team efforts.\nThis is not the most exciting read, unlike The Goal, Phoenix and Unicorn projects, it is a more academic discussion of principals and potential solutions to common problems when managing development queues. But if you work your way through this text you are never going to look at your development process the same way again.\nLean Enterprise From the author:\n How well does your organization respond to changing market conditions, customer needs, and emerging technologies when building software-based products? This practical guide presents Lean and Agile principles and patterns to help you move fast at scale\u0026ndash;and demonstrates why and how to apply these methodologies throughout your organization, rather than with just one department or team. Through case studies, you\u0026rsquo;ll learn how successful enterprises have rethought everything from governance and financial management to systems architecture and organizational culture in the pursuit of radically improved performance. Adopting Lean will take time and commitment, but it\u0026rsquo;s vital for harnessing the cultural and technical forces that are accelerating the rate of innovation.\n Discover how Lean focuses on people and teamwork at every level, in contrast to traditional management practices Approach problem-solving experimentally, by exploring solutions, testing assumptions, and getting feedback from real users Lead and manage large-scale programs in a way that empowers employees, increases the speed and quality of delivery, and lowers costs Learn how to implement ideas from the DevOps and Lean Startup movements even in complex, regulated environments   Andy\u0026rsquo;s take:\nI\u0026rsquo;ve never highglighted more sections of a book for use later (well it is a close count between Accelrate, Prinicipls of Product Development Flow), but this is a great guide to not only making agile work at the one team level, but how to make large technology organizations work quickly, in small batches, to advance your goals. Must read if you are working in a bigger organization.\nCommunicating Product Managers spend most of their time communicating. You communicate with stakeholders to understand their needs and explain their plans, you communicate with your team to explain the business case for a feature and the users needs, you communicate with the sales and field team to explain what has been built and what is on the roadmap. Learning to communicate well is essential to good product management. Here are a few resources that I think have improved my communications skills.\nThinking in Bets: Making Smarter Decisions When You Don\u0026rsquo;t Have All the Facts From the author:\n Annie Duke, a former World Series of Poker champion turned business consultant, draws on examples from business, sports, politics, and (of course) poker to share tools anyone can use to embrace uncertainty and make better decisions. For most people, it\u0026rsquo;s difficult to say \u0026ldquo;I\u0026rsquo;m not sure\u0026rdquo; in a world that values and, even, rewards the appearance of certainty. But professional poker players are comfortable with the fact that great decisions don\u0026rsquo;t always lead to great outcomes and bad decisions don\u0026rsquo;t always lead to bad outcomes.\n Andy\u0026rsquo;s take:\nThe thing I took away from this book is learning to be clear about what you don\u0026rsquo;t know. Lots of people will expect or want the product manager to have all the answers. But there are always unknowns, we are always experimenting and making bets about what might work and what users might need. Even with good process we\u0026rsquo;ll always be guessing at some level. This book gives you some great tools to help understand how to frame your uncertainty and communicate it.\nBlogs, Podcasts, and Newsletters   Product Thinking - Melissa Perri, who also authored \u0026ldquo;The Build Trap\u0026rdquo; recommended above also has a podcast, which is also great. Episodes alternate between interviews with notable product leaders and answering questions from listenters. As I\u0026rsquo;m writing this the podcast is relatively new but has already had great content. Strong recommendation.\n  John Cutler - The Beautiful Mess - John Cutler is one of the most prolific writers on product management that I know of today. His newsletter is a great way to keep up without being overwhelmed by the stream of content on his twitter feed (which is also worth following, but hard to catch all of).\n  The Margins - Ranjan and Can write one of the smartest newsletters out there on trends in tech and its impact on society. Not really about product management at all, but always a great read to help product managers think about how the software they are writing might be shifting or moving with society and computing at large.\n  Stratechery - Ben Thomson writes one public article and three subscriber only newsletter updates a week. With a focus on the business of software strategy, the impacts of his cornerstone Aggregation Theory, and breaking down the tech news of the week with an eye on the strategy or apparent lack there of the various companies making the news. Reading Stratechery regularly is like getting a business school education, without having to take 2-3 years and tens of thousands of dollars in debt. You unfortunately don\u0026rsquo;t get a fancy degree as a result.\n  The MetaCast - Great podcast from very experienced agile coaches.\n  Enterprise Ready - Podcast and Enterprise Ready - Website - These sites are incredibly valuable for product managers working in the enterprise software space. The podcast is a great set of conversations with enterprise founders and operators talking through how they found their ideas, how the started their companies, how they approach sales and support, I don\u0026rsquo;t think I\u0026rsquo;ve shared any single podcast to members of my teams as often as I do this podcast. The website is also valuable giving an enterprise PM a list of features that they can start checking off to make sure they are ready for the biggest customers.\n  The Product Experience - The podcasting arm of the Mind the Product network. They cover a huge variety of different aspects of product management for different industries, different size companies. A valuable resource to help you discover new things that you might need or might not know existed.\n  ","permalink":"https://www.nortrup.dev/posts/product-management/2020-02-11-self-taught-pm/","summary":"I made a career transition into Product Management four years ago. Prior to starting my first role at Splunk as a line level Product Manager my previous experience was in the U.S. Army. I didn\u0026rsquo;t know that product management was a career field option when I started my job search, and as I look back on it I\u0026rsquo;m amazed I got any interviews at all. I had no meaningful experience building software, and I made some blind assertions that I had qualifying experience as an Army Officer.","tags":["Product Management","Professional Development","Books"],"title":"The Self Taught Product Manager"},{"content":"Commuting is a pain. My particular commute is a multi-stage, adventure that can take an hour on a decent day and mind boggling amounts of time if something goes wrong in Seattle traffic. My spouse and I start by carpooling to our day-care, drop off a kiddo, then catch a bus into downtown, and finally walk across town to my office. Most of the time it works just fine. But it doesn\u0026rsquo;t take much to throw off the whole experience to a post-apocalyptic hell-scape of gridlock. In the past several years, we\u0026rsquo;ve seen car accidents and trucks full of bees or fish completely stop the major high ways and all of the side streets.\nI recently bought a OneWheel Pint to help speed up the last leg of my commute (a 20 minute walk, each way) from the end of the bus ride to the office and back. For this use, I think that it is good option for me, and would recommend it.\nTLDR  The Pint is a lot of fun to ride, I\u0026rsquo;ve been snowboarding most of my life and it feels very like that. It has plenty of range to be a first and last mile solution connecting me to my bus from home and office. The carry handle is good for carrying it onto the bus, and across the lobby and street; but don\u0026rsquo;t plan on using it to carry the Pint across town if you run out of battery. Get the fender. Be prepared to get questions.  The Ride Snowboarding on at the bottom of the hill The best way to describe the ride is to say it feels like snowboarding on a nice day as you are getting to the bottom of the hill and things are leveling out as you come into the lift. You take up that nice relaxed stance and coast, maybe a little faster than you should, but you feel like you are in control and you can stop as needed.\nThe Brakes One thing I love about the pint is that you can actively break just by leaning back. It feels very intuitive and is powerful enough to stop you, assuming you aren\u0026rsquo;t going too fast, which on the pint you really can\u0026rsquo;t. As always you need to ride in control for the conditions, I slow down in the rain, because your stopping power is entirely dependent on a very small patch of rubber. As an additional plus, it charges the battery when you do break. So if your coming down a big hill you actually end up with some extra juice at the bottom.\nPhysical Things On the bus The Pint is built to be small. That is mostly very good for me. I find that it is small enough to carry on the bus and small enough to tuck under my desk at work. When I\u0026rsquo;m on the bus if I get a seat I can sometimes park it under the seat, or I can stand it upright between my legs and kep my legs inside the width of my own seat, and not stick out into the aisle.\nMy big feet One small down-size of the small size of the Pint is that it has a relatively small deck for your feet. I wear size 12 shoes which means that my toes stick over the end side of the board almost anywhere I put my feet.\nWeight The pint feels pretty reasonable weight wise, and the carry handle is super helpful; but, there are zero ways to carry the pint that allow you to roll or drag it. I think this is something that the Solo-Wheel or razor scooter style devices have an advantage, they each have carry handles that allow you to roll the device while not riding it. This is worth keeping in mind because there are places you definitely will need to carry the Pint around.\n Getting on and off the bus - requires you to pick it up and carry it down the bus. Walking across the lobby - I work in an office building that won\u0026rsquo;t let me to ride through the lobby Curbs - The Pint does not curb jump, I\u0026rsquo;ve totally wiped out trying, it also absolutely can\u0026rsquo;t go up a curb without a curb cut. Which by the way, has given me an enormous new level of appreciation for the difficulty that mobility challenged individuals must have navigating through the city. Many drivers and pedestrians will block the entrance or exit to a curb cut. Drivers are usually pulled out into the intersection trying to make a turn, people are usually waiting for a light to turn so they can cross the intersection. For the me on the Pint this is annoying but easy to fix, I stop, pick up the pint and walk across the intersection. But for someone in a wheelchair, walker, or other mobility challenge, you would just be stuck.  Range For my particular commute I find the Pint has plenty of range for my daily use case. I travel about 3 miles round trip each day, in a pinch or transportation apocalypse I can make it all the way to our daycare which is 5 miles away. But I\u0026rsquo;ve learned twice not to push it to far. On two occasions I\u0026rsquo;ve charged the Pint at work, taken it to the bus in the evening, then in the morning tried to ride straight from day care all the way to the office. That is a total trip of 7 miles, with a little bit of an incline on the way into the city. That unfortunately meant that I had to cary a heavy weight across the city. Despite the handle, it\u0026rsquo;s still not comfortable to carry much further than across the lobby of a building. And you look pretty silly carrying your electric scooter with a helmet on the sidewalk.\nBumpy things One thing that surprised me is how much the rounded wheel leaves means you feel lots of the texture of the road. I\u0026rsquo;ve noticed that the board wobbles even on subtle things like raised painted lines on roads.\nWater I live in Seattle, I ride the pint in the rain. The fender is an absolute must. My feet stay super dry, in fact drier than if I had walked on a rainy day.\nBe prepared for questions This is absolutely a conversation starter, I get asked about it on the bus, in the bike lanes, around the office, random people on the street. It\u0026rsquo;s different and it stands out. People will have questions about how it rides and how safe you feel (wear a helmet, I should probably have wrist guards).\nNavigating the city Bike-lanes, sharerows, and sidewalks I\u0026rsquo;m a cyclist much more than I am a skateboarder. To be perfectly honest, if I had my preferences, I would probably ride my bike to work every day rather than take a car, a bus, and OneWheel. I\u0026rsquo;m familiar with the downtown bike lanes, and am generally comfortable riding my bike in most traffic conditions.\nI don\u0026rsquo;t feel as comfortable on the Pint, maybe I\u0026rsquo;ll get there over time, but between it\u0026rsquo;s max speed (16 MPH) and not feeling as stable as I do on my bike, I don\u0026rsquo;t like to ride in sharerows. If available I will a separated bike lane, other wise I will get up onto a sidewalk. In bike lanes I feel like can go fast enough to not be in the way of other users. On sidewalks I feel like I can go slow enough to crawl behind a little old ladies, and gawking tourists.\nIt\u0026rsquo;s also important to remember that the Pint is essentially silent. People walking and riding don\u0026rsquo;t hear you coming, especially in a world when almost everyone has a set of earbuds in while they walk across the city. So being cautious about surprising people when you come up behind them.\nYield to slower traffic Particularly when I\u0026rsquo;m on the sidewalk, I work really hard to be courteous to other people. I can move a lot faster than anyone walking, and therefore can afford to let other people go first. My mental model is to apply snowboard trail rules on the side walk.\n  The Golden Rule: Control! - Keep your speed in check, and always control your direction. Make sure you can stop and avoid any person or obstacle at all times. Yield to Anyone Downhill Ahead of You! - Yield to persons downhill ahead, and choose a course that ensures their safety. Free Up the Trail! - Only stop if you can be seen from above, and never obstruct the trail. At Intersections, Yield to Persons Uphill on foot! - Yield to skiers and riders uphill walkers when entering a trail, or at intersections. Help The Ski Patrol! If you’re involved in or witness an accident, remain at the scene and identify yourself to a first-aider. No To Runaway Gear! - Always use and wear the appropriate device to prevent runaway equipment. No Drugs, No Alcohol! - Do not use the lifts or trails roads when under the influence of drugs or alcohol. Obey the Signs! Obey all signs and warnings, and never venture off the trail or onto a closed trail.   ","permalink":"https://www.nortrup.dev/posts/technology/2020-01-02-onewheel-pint-review/","summary":"Commuting is a pain. My particular commute is a multi-stage, adventure that can take an hour on a decent day and mind boggling amounts of time if something goes wrong in Seattle traffic. My spouse and I start by carpooling to our day-care, drop off a kiddo, then catch a bus into downtown, and finally walk across town to my office. Most of the time it works just fine. But it doesn\u0026rsquo;t take much to throw off the whole experience to a post-apocalyptic hell-scape of gridlock.","tags":["Review"],"title":"One Wheel Pint - An Honest Review"},{"content":"There has been much ink spilled and great gnashing of teeth over Facebook\u0026rsquo;s news tab and the inclusion of Breitbart as a \u0026ldquo;high quality\u0026rdquo; news source. I continue to be amazed that social media organizations have moved to help establish clear standards and certification for what counts as a high quality newsroom.\nIn Enterprise software if you want large companies (like Facebook) to buy your software or services, you will eventually have to get a compliance attestation from a third party auditor that your company follows industry standard practices around code development, testing, deployment, and security. Depending on who your potential customers are there are a cornucopia of potential certifications, SOC2, ISO (lots of these actually), HIPAA for health, PCI for credit cards, FedRAMP for the U.S. Federal government. All of these standards provide you a checklist practices that you have to demonstrate your compliance with, then you find an auditor to come in, look at your books and ask you to prove that you follow your own stated policies.\nNews rooms are not all that different than software development teams. They produce news content and we produce software through lines of code and configuration. They (should) fact-check articles and software development (should) run automated tests before deploying. News organizations (should) have a process to respond to questions of accuracy and (should) issue redaction and corrections when their stories are demonstrated to have factual issues; software shops have vulnerability disclosure programs and (should) have the ability to provide patches and remediation for security flaws. Conceptually there are broad parallels between these two systems, we have functioning systems to provide compliance attestations for software, it should be possible to do the same for journalism.\nIt is important to note that none of the things I\u0026rsquo;ve mentioned have any real bearing on the content of the journalism. It should be equally possible for news organizations from every end of a multi-dimensional political, social, economic spectrum to implement practices that demonstrate that the stories they produce are researched, fact checked and published responsibly. There are certainly no shortage of journalism schools and professors who educate journalists, I\u0026rsquo;m sure they would be interested to establish some standards.\nIf, and I know a big if, we had this in place we would have a tremendous boon to the news consumption ecosystem. News aggregators of all stripes (Facebook, Twitter, Reddit, Google News and Search) could all have a uniform standard by which to decide how they are going to label content, based on the rigor of its production. If you have a specific \u0026ldquo;News\u0026rdquo; section, technology companies could make the responsible choice of only listing certified content providers with traffic above a large threshold. If an article is going viral through their network they could put a clear asterisk next to the content; \u0026ldquo;This article appears to be news, but we cannot confirm their compliance with best practices.\u0026rdquo;\nYes, this would probably favor the big news providers over smaller ones. But it would also provide an opportunity for news aggregators who say they care about free speech and democracy and the media ecosystem to build tools, support training and development for small news sources to professionalize and raise the bar. Additionally there could be a progressive ladder of practices and standards for organizations of increasing size.\nOn the plus side, this gives the news aggregators the opportunity to externalize some of their decision making about what is considered news. No longer do they need to get dragged in front of legislative bodies about their bias in news source selection they can say, “we adopted an academic standard over which we had no meaningful influence, we allow third party auditors to assess compliance with that standard and prioritize content from those sources because we care for our users.”\nThe spread of freedom of speech and democracy depends on an informed public, but an informed public needs well sourced information from respectable sources, not hype and lies produced for the clicks and the lolz.\n","permalink":"https://www.nortrup.dev/posts/technology/2019-10-30-the-compliant-news-room/","summary":"There has been much ink spilled and great gnashing of teeth over Facebook\u0026rsquo;s news tab and the inclusion of Breitbart as a \u0026ldquo;high quality\u0026rdquo; news source. I continue to be amazed that social media organizations have moved to help establish clear standards and certification for what counts as a high quality newsroom.\nIn Enterprise software if you want large companies (like Facebook) to buy your software or services, you will eventually have to get a compliance attestation from a third party auditor that your company follows industry standard practices around code development, testing, deployment, and security.","tags":["Society","News"],"title":"The Compliant News Room"},{"content":"I don\u0026rsquo;t like conducting interviews. I would rather be interviewed for a job than interview someone for a job. If I have to choose between written and oral communication, I will usually prefer to write. I like async communication because I have time to think clearly and then commit to words what I\u0026rsquo;m thinking. I have a mild central auditory processing disorder, meaning an in-person interview pushes my limits of listening, and critically processing, and taking notes on answers in real time. Critical assessment of the candidate\u0026rsquo;s answer will probably be the functional task that drops.\nThere are lots of complaints about the interview process, mine is that I have a hard time going from just a resume for context to a fully formed opinion in 45 minutes. I frequently walk out of an interview feeling good but wanting to ask follow up questions the next morning, or realize that I didn\u0026rsquo;t get a full answer to a question.\nLastly almost every job description asks for applicants with strong written and verbal communication skills. But the average interview loop only tests your written communication skills by asking for a resume, which is not real writing.\nI would love to see an interview format that goes as follows:\n I read your resume, write a few questions and send them to the candidate You respond, with a soft commitment not to spend much more that 20-30 minutes answering Candidate and interviewer have the option to go back and forth a few times on specifics or follow ups The candidate comes in for an on-site or VTC discussion of ~20 minutes per person to talk on the same subject as the emails  I\u0026rsquo;m not looking for a laborious homework assignment, just have a format that allows me to not feel rushed into an assessment.\n","permalink":"https://www.nortrup.dev/posts/technology/2019-07-10-the-email-interview/","summary":"I don\u0026rsquo;t like conducting interviews. I would rather be interviewed for a job than interview someone for a job. If I have to choose between written and oral communication, I will usually prefer to write. I like async communication because I have time to think clearly and then commit to words what I\u0026rsquo;m thinking. I have a mild central auditory processing disorder, meaning an in-person interview pushes my limits of listening, and critically processing, and taking notes on answers in real time.","tags":["Technology"],"title":"The Email Interview"},{"content":"I\u0026rsquo;ve been a product manager for three and a half years after being an Army officer for eight. Never in that time have I felt like I truly owned all of the products I\u0026rsquo;ve worked on. I’ve never had the final say in everything, and I’ve never sat to review that every single story met all of the acceptance criteria. Time, team dynamics, and the nature of working on large complex products precludes any single person from being able to exert that level of control. I’m largely in agreement John Cutler about the overload of product manager responsibilities and the danger of centralizing them. I’m here to propose that product managers should think of themselves as good scouts rather than all controlling owners of the product.\nI spent two years as a communications officer (S6) for a Stryker reconnaissance cavalry squadron (1-14th Cavalry). I learned to love the concept of the cavalry not just because they wear Stetsons and spurs, but because reconnaissance is a truly challenging role in the battlefield. Lightly armed and few in numbers, scouts ride ahead of the rest of the army to find the enemy and report back any information they can before the main forces make contact.\nScouts must be agile, to stay out of sight but still have a view, they need to move quickly to avoid being getting into a fight with an enemy bigger than them, and they need to be great communicators to describe what they see in as much detail as possible. Not only do scouts tell the rest of the army about the enemy; they will tell you about terrain, the quality of roads, and the civilians in the area. It is not uncommon for the cavalry to be dispatched before more than a basic plan is formed for the rest of the unit. Their job is to find the answers the rest of the unit needs to form a plan.\nAll of this information helps the rest of the org make good decisions about what to do next. The rest of the organization will still make contact with the enemy eventually and will learn a lot in the process, as they get close they will start collecting their own information, they will send out their own skirmishers, they will study the terrain they are going to fight on and decide how to make it work to their advantage, but all of this starts with scouts going ahead of the Army to paint the first picture of the situation.\nIn the Army larger units have progressively larger reconnaissance organizations. Much as a startup may only have one product manager or simply the founders, an infantry company might have single scout sniper section. But a battalion has a scout platoon and a brigade a whole squadron. These increasingly larger teams give the commander the ability to reach farther forward and get more information from more places.\nHow you deploy your scouts or product managers can vary greatly by what you need for each operation. Concentrate the scouts on a high value route reconnaissance and you will know everything about a given piece of terrain. Do you need to get some general details on a broad area, spread your scouts out and get a broader but less detailed view of the world.\nOne thing neither the cavalry nor all the product managers in the world can do for you is to answer all of the questions your organization might have. The fog of war is real and good scouts can only lift a little bit of it for a limited amount of time. If poorly deployed or organized they can leave you blind and let the rest of the team walk into the unknown.\nIn this analogy our Product Managers are you scouts, and the engineering, UX, UI, marketing and support teams are the troops following behind. the enemy might be your competitors, or it could be your users, the terrain might be your tech debt and current features. Regardless of how you fill in this analogy, I think that product management can and should be filling the role of scout in lot of product organizations.\nWe don’t have to own the outcome, that is a team effort. But Product Management can and should be helping chart the course by telling everyone else what lies ahead and helping them form a plan about how they are going to solve the problems that they will encounter along the way.\nSuivez Moi!\n","permalink":"https://www.nortrup.dev/posts/product-management/2019-07-06-product-managers-as-scouts/","summary":"I\u0026rsquo;ve been a product manager for three and a half years after being an Army officer for eight. Never in that time have I felt like I truly owned all of the products I\u0026rsquo;ve worked on. I’ve never had the final say in everything, and I’ve never sat to review that every single story met all of the acceptance criteria. Time, team dynamics, and the nature of working on large complex products precludes any single person from being able to exert that level of control.","tags":["Product Management","Military"],"title":"The Product Manager as Scout"},{"content":"Watching the aggressive use of Facebook, Twitter, Reddit to disrupt American political and social systems makes me think that organizations above a certain size should have a Chief Devil’s Advocate on their team. This exec should be focused on every way that your product could be used for misdeeds.\nThe term Devil’s Advocate is commonly used when someone wants to sound smart in a meeting by being contrary about the topic under discussion. (See: https://xkcd.com/1432/) But it’s original use was as a formal position in the Catholic church to argue against the canonization of individuals to sainthood.\n It was this person’s job to take a skeptical view of the candidate’s character, to look for holes in the evidence, to argue that any miracles attributed to the candidate were fraudulent, and so on. — Wikipedia\n They should be thinking every day how your product could be used, as designed for evil. Things like:\n Using your advertising service to racially filter your targeted housing adds. Making fake profiles to amplify lies and drown out fact. Creating automated trolls to harass others to suppress their speech. Undermining democratic elections and institutions. Use your platform to convert and radicalize people. Anything not against the law, you wouldn’t want on the front page of the Washington Post. Government use to oppress their population.  The devil’s advocate should be supported by a cross functional team to understand of your products effects on politics, society, technology, gender, and ethnic equality, markets, and more. Staff their office with individuals experienced in counterintelligence, psychological operations, inform and influence operations, history.\nEngage them early in the product development cycle, and continue to look over the entire portfolio of the company. Each new feature should be looked at in how it can be used in combination with everything else you produce and every other tool in the ecosystem around you. They shouldn’t just be looking at your product in isolation, but also in combination with twitter, facebook, bitcoin, etc.\nNot only should they think about how you could be evil, they should search for actual evil in progress. It isn’t impossible to find when you start looking. As demonstrated by the success of ProPublica and their work on Machine Bias. It should be even easier for a fully empowered executive inside of the company with the full run of internal data, metrics, and user content.\nIt is important to discuss what this isn’t, as much as what it is.\nThis is different from your security red team who is trying to break your product. They aren’t looking for a bad line of code that results in dumping credit card and social security numbers onto the dark web. Instead they are looking for features used as designed to damage the society and systems of trust around them.\nThis is different from your legal department. The legal department looks to reduce risk for the organization by crafting terms of service that are legally defensible and help you avoid breaking the law. The Devil’s Advocate is looking to understand how your TOS can be exploited or ignored in ways that you won’t notice for the maximum negative impact.\nThis is different from your Chief Product Officer. Your CPO is trying to build products that delight your customers. You want a CPO that is full of positive vision of what your product could be doing to make your customers lives better. The Devil’s Advocate is working to find the things that will delight evil doers in your CPOs work.\nUltimately, as the men and women who build the technology shaping the world today, we have a responsibility to think about how it could be used against us or our society. As the engineers, and product leaders who built it we are in the best position to understand how the technology works and monitor it’s effects.\nAs product leaders and engineers we are understandably excited about the great things we create. We see the value for our customers and our shareholders. Many even see their products as drivers of enormous social good. It will take strong leaders with a mandate to see the worst in our wonders to help us reach our highest potential.\n","permalink":"https://www.nortrup.dev/posts/product-management/2018-01-08-chief-devils-advocate/","summary":"Watching the aggressive use of Facebook, Twitter, Reddit to disrupt American political and social systems makes me think that organizations above a certain size should have a Chief Devil’s Advocate on their team. This exec should be focused on every way that your product could be used for misdeeds.\nThe term Devil’s Advocate is commonly used when someone wants to sound smart in a meeting by being contrary about the topic under discussion.","tags":["Product Management"],"title":"Chief Devil’s Advocate"},{"content":"I listened to a great episode of Deliver It on DevOps for Product Owners and a comment by the Lee Janson that you don’t have to have perfect DevOps practices right away really struck home with me. Upon reflection it exactly maps to the evolution that my team has been going through over the past year on our developer tool Splunk AppInspect.\nAppInspect is a tool that has grown tremendously in my year with Splunk from a something we built for internal assessment of apps that applied for our Certification Program, to a tool publicly available that as both a standalone CLI tool or through an REST API.\nWe are really excited about what the product is and does. But, my team’s journey with it has been a great example of continuous improvement of both product and practice, and is perhaps a more interesting story than what the product itself does.\nThe Infant: A CLI tool for our own team Appinspect was born out of necessity when the team took over the App Certification it was more popular than the initial resources could handle and a backlog of apps had collected. The first essential task was to automate evaluation of app quality. With basic automation in place we were able to quickly establish which apps were ready for careful review and which ones could be sent back to the developer for further development.\nAppInspect drew strong inspiration from the unit testing tools that we loved and is written in Python 2.7 to line up with Splunk and most Splunk development. Building a CLI test suite allowed us to greatly reduce the amount of work to determine some aspects of quality for apps. This saved us a lot of time and money, which is good, but it didn’t fix all of our problems.\nThe Toddler: I need this on Windows As the certification program grew in popularity we needed to split out responsibilities for our work so that the engineers doing code reviews and development on the tool didn’t also have to run the tool and send the results back to our customers. To do this we brought on a contractor to help manage workflow and communications with developers.\nUnfortunately she worked on a Windows computer, and we were dependent on some of the *nix utilities of our development environment, like the “file” command to test permissions and docker for running dynamic tests in a sandboxed environment. Rather than reduce features to put the tool on Windows we moved forward and built a web-app for internal use that allowed our contractor to run reports on her own and send well formatted reports to our developers.\nThis first web tool was by no means a web-service or an API. It was a very simple tool built with Flask, it did all of the work server side and output the results. But it was progress, with a web UI we were able to provide a cleaner format for results than a text file.\nFrom a DevOps perspective this was also our first separation from the developer and the users. This is the point that we introduced releases and release management to our process. When we had a simple CLI it was very simple for a developer to write a new test and have it almost immediately show up in the next run. With our web tool we now had to write, build, test and deploy to a server. Releases were infrequent, in part because they were manual. But also they remained manual because we had a slow release cycle.\nThe Terrible Twos: Let’s make this public Adding the web tool was an enormous success for us, it helped us get data back to our customers much faster so that they could make changes and improve their apps. Unfortunately a better process is still not a perfect process. At this point we had a nice web tool but only if you were on our team and only if you were on our intranet. Additionally the feedback mechanism was slow. Developers needed to upload their app to our app store, we needed to see that there was a new version, we needed to test the app and send them results by email (cringe).\nThe way ahead was clear, we needed to enable our customers to submit apps themselves and get feedback without ever talking to us. To do that we needed to turn our simple Flask app into a proper REST API and make it publically available.\nAlong the way we picked up additional stakeholders. Splunk Add On Builder wanted to be able test add-on against our best practices before developers finished development and internal development teams wanted to test apps as part of their build and release process.\nThis was a great validation of what we were doing, but it put us on a timeline, we needed to have the API out the door in time for Splunk’s .conf2016, when the next version of Add On Builder was set to ship.\nThe good news is that we made it. The bad news is that we accumulated some technical debt in the process that made CI/CD, debugging and testing much harder.\nThe Threenager: This monolith is becoming a bit cumbersome As we grew the initial version of our API we had a single repository that contained all of our docker half dozen docker images and the docker compose files that spun it up into a service. Additionally our dockerfiles were a little beefy, all built around Ubuntu, which has everything you need but probably a lot of things you don’t need.\nIt worked, but it was a burden to develop around. A single build of the repository could take an hour. That wasn’t a great flow for our developers and it really wasn’t popular with our build tools team that all of our commits tied up our shared build server for a significant amount of time.\nNot only was it a pain to develop for, it was a pain to deploy. And because it was a pain to deploy into production. Because it was hard to deploy we waited to deploy updates until we had a lot of things worth putting into production. Because we were deploying big chunks we were gun shy about testing all of the changes.\nThe solution is what we call the “great refactor”. We staked out a full two and a half weeks to break out every container into it’s own repository. At the same time we were able to consolidate on a single base image based on Alpine. Using Alpine ment that all of our images were super small, and fast to build. Even better because we were using a common base image for the project the only thing we had to build was the changes between containers. This has been great for us for a lot of reasons.\n Faster builds. Right now our longest build is about 1:30. Individual unit tests for each container. Individual versions for each container meant that we could do integration tests that only reflected changes in a single component. Merges got easier. The ability to deploy an individual components All of these things made it much easier to deploy, in fact it made it easy to deploy.  The Preschooler: Automate build and test Around the time that we did our refactoring we also were allocated a dedicated QA resource. We had build thousands of unit tests to support validation of individual checks. What we gained a specialized QA resource was someone helping to build more comprehensive end to end, integration and system testing.\nNot only did we get more actual tests, we gained test and build automation. This change meant every commit to our development and master branches and all pull requests kicked off our test suite. This greatly increased our confidence in merging and deploying.\nMore confidence meant that were more comfortable merging and deploying with frequency. With confidence came speed of delivery which allowed us to ship new solutions, and solve problems faster for our users.\nThe Kindergartener: Let’s make get better with data The refactor of our API provided us an opportunity to get more feedback about our App. One of the best things we did for ourselves was to start gathering our application data into our corporate Splunk server. Onboarding this data allowed us to drastically improve our ability to debug and monitor the environment.\nThe entirety of our application runs inside of Docker, so we are able to use the Splunk logging driver for Docker to collect all of the application logs and ingest them in Splunk. With this information in hand we were able to gain critical knowledge about our app’s performance and information about how developers were using our service and the Splunk platform. We can now:\n Trace the entire flow of a request through the system Identify checks that fail disproportionately and target changes in the platform, documentation or check Identify how much areas of the Splunk platform are used to drive marketing, development and documentation changes Debug issues with the API Monitor the performance of the API Understand user behavior and usage  The Grade Schooler: Automated deployment and monitoring The next step in our journey is to begin doing truly continuous deployments and improving our monitoring processes so that we not only have confidence before we build, but we have confidence after we deploy that services are running.\nOur primary vehicle for monitoring will be Splunk’s IT Service Intelligence product which allows us to define all of our services and associate KPIs to them and monitor their performance continuously. Using ITSI’s built in machine learning tools we will be able to set thresholds automatically based on prior usage.\nI’ve framed this article as a journey rather than a set an executed plan because I don’t think it will ever truly end. Just like children the service will continue to grow and evolve, and we will update our practices and tools to keep pace with new demands.\nMost importantly we have learned that we need to be continuously aware of our pain points interrogate those challenges to determine what the cause of the problem is and how it can be resolved.\n2022 Update AppInspect is now used for every single Splunkbase upload and some failures are blocking for all apps. This is one of the fullest visions we had for the service as we were designing it. It\u0026rsquo;s nice to see products you\u0026rsquo;ve built carry through to their full potential even after you\u0026rsquo;ve left.\nAppInspect also served an important role in helping Splunk and it\u0026rsquo;s partners find and update a lot of Python 2 as it was being removed from the platform.\n","permalink":"https://www.nortrup.dev/posts/product-management/2017-04-27-continuous-improvement/","summary":"I listened to a great episode of Deliver It on DevOps for Product Owners and a comment by the Lee Janson that you don’t have to have perfect DevOps practices right away really struck home with me. Upon reflection it exactly maps to the evolution that my team has been going through over the past year on our developer tool Splunk AppInspect.\nAppInspect is a tool that has grown tremendously in my year with Splunk from a something we built for internal assessment of apps that applied for our Certification Program, to a tool publicly available that as both a standalone CLI tool or through an REST API.","tags":["Product Management","ci/cd"],"title":"Continuous Improvement — A journey"},{"content":"","permalink":"https://www.nortrup.dev/posts/product-management/product-board-templates/productboard-field-descripsions-and-good-process-docs/","summary":"","tags":["Military","Product Management"],"title":"Productboard Field Descripsions and Good Process Docs"},{"content":"Ken Norton in an effort to help companies understand how to hire product managers wrote a guide: How to Hire a Product Manager I’m here to argue that the person you are looking for might just be a transitioning or former military officer. I have never been a Product Manager, but I have spent the last eight years as an officer in the United States Army, I’ve had the pleasure of working with some amazing peers and the honor of leading, coaching and mentoring some very promising young lieutenants.\nHire all the smart people  Product management is fundamentally about thinking on your feet, staying one step ahead of your competitors, and being able to project yourself into the minds of your colleagues and your customers.\n The average day as an officer in the military involves wearing dozens of hats. First thing in the morning they are a physical trainer, over breakfast they will discuss maintenance and accountability for hundreds of thousands if not millions of dollars of equipment, by lunch time they will have developed a ten week training strategy for the organization, counseled a young soldier on their financial troubles and been constantly monitoring three groups of subordinates progress on assigned tasks.\nIf they happen to be deployed someplace like Iraq or Afghanistan, add to that constantly assessing if plans and operations are forwarding operational objectives all while attempting to understand how the enemy will attempt to attack and undermine everything you are trying to do.\nThis constant drum beat of context change and complexity is as on your feet as you can get. It drives intellectual growth and prepares you to deal with any problem.\nStrong technical background It might be tempting to judge a former officer by their undergraduate degree to determine if they are sufficiently technical, but that would be a mistake. While some branches require officers in certain career fields to have accompanying academic experience, most officers only have a requirement to have earned a bachelor’s degree. That neglects professional education that they have been given by their service. Almost every job in the military requires some form of technical expertise.\n Army Signal Corp officers learn satellite communications, computer networking and systems administration, and radio wave propagation. Combat Engineers learn to calculate the exact amount and placement of explosives needed to clear or create obstacles, build roads, construct buildings. Artillery Officers can calculate by hand the charges, trajectory and angle required to fire a explosive round a dozen miles and land in just the right spot. Logistics Officers must calculate and forecast consumption rates of food, water, fuel, ammunition for hundreds or thousands of Soldiers. Infantry and Cavalry Officers learn to operate radio systems, mine detectors, RF jammers and complex vehicles that integrate information from dozens of sensors.  So look past the type of degree, some of the most technical officers I know got a BS in Political Science then learned every feature and system of an Apache helicopter.“Spidey-sense” product instincts and creativity This is hard to judge in any person, especially if they don’t have prior experience, by no means does experience as an officer guarantee it. But many officers are required to develop their sense of product fit, even if their product wasn’t the creation of a new physical or digital product. As an example I’ll tell you the experience of my friend Jason.\nWhen we deployed Jason was a junior officer with less than three years experience in the Army. He was sent to a small outpost at least a three hour drive from the nearest support. While he was there Jason was responsible for a product called “Stability”. In order to do that he had a collection of tools ranging from use of force to diplomacy. He was expected to mentor Afghan police officers by choosing training that would advance their professionalism. He fielded numerous requests from village elders for infrastructure improvements and resource requests and was expected to make recommendations about the best ways to spend limited resources to make gains. He had to ensure that the efforts of a agriculture development team, civil affairs team and his own Soldiers worked in unison to create stability and reduce the influence of the Taliban.\nJason’s product wasn’t a new feature, but it required him to be focused on an objective and pick the best tools to advance his product. While he could get advice and many times had to get approval for his actions, responsibility for the product was ultimately his. And more often then not the decision is guided by gut instinct careful consideration.\nLeadership that’s earned Leadership is an expected and required skill for military leaders. Most new officers will be placed in charge of a organization of at least 30 people within our first year of service. While officers have significant positional authority over the troops they lead the positional authority. While that gives you the authority to issues orders until you are blue in the face, you won’t get commitment and full engagement until you earn their respect. That is where leadership begins.\nMost times that means acting as servant leader your subordinates needs. Officers serve as obstacle removers and secure obtainers. We look after the physical and mental, and financial well being of our Soldiers. We must be fair and just when serving as judge and jury over their transgressions. We set the standards by which performance is evaluated, and need to always adjust the bar to be challenging, attainable, and ever increasing. They watch how hard you work at physical training, how well you shoot your weapon at the range, the hours you keep and what you ask of them.\nEvery action is observed and evaluated making adjustments in the level of trust your troops have in you. Military officers earn your success by muddy boots leadership and demonstrated care for our troops.\nAbility to channel multiple points-of-view As a company executive officer I was the guy in the middle of everything. I was the senior lieutenant in the company, I was responsible for maintenance, logistics, I served as the commander when the the boss was out of the office, I ran a network operations team. As a result I was expected and able to see every side of a problem. When assessing any action I could describe the challenges it presented for equipment maintenance, or the advantages it would yield for resupply.\nAs a member of a squadron staff I was the only communications officer in a 500 person organization. I served as the translator between technical experts and operational planners and needed to be able to explain to each the motivations and requirements of the others.\nThis experience is not uncommon, almost every officer is in charge of multiple teams with the responsibility to shape their efforts into a single effort and see how that effort fits into the plans for the organization at least two in every direction.\nGive me someone who’s shipped something Most military officers probably haven’t shipped new software features, or developed a new product from scratch. But we have all spent our careers driving projects to completion. We are measured by our accomplishments not by our efforts. Here are few examples of the kinds of problems I’ve seen Soldiers finish.\n Coordinate movement of 114 containers, trucks and generators from Germany to Iraq Build a new data center in Afghanistan Execute convoys that move dozens of vehicles hundreds of miles Develop a training plan that moves from individual skills training to working in small teams to working as a large unit Maintain accountability for $30 million in equipment spread over 14 locations and thousands of square miles of Iraq  Lastly we are used to accountability, we take it very seriously because in our profession it is measured in lives saved or lost, including our own. Even training can be dangerous, we know that delivering the right solution can be the difference. We understand and think about second and third order effects.\nConclusion Next time you are looking to hire a product manager think about finding someone with military experience. It might be different than the experience that you are used to reading on resumes. But if you will have a hard time finding more dedicated, agile and used to delivering tangible solutions than a military officer.\n","permalink":"https://www.nortrup.dev/posts/product-management/2015-12-05-why-a-military-officer-should-be-your-product-manager/","summary":"Ken Norton in an effort to help companies understand how to hire product managers wrote a guide: How to Hire a Product Manager I’m here to argue that the person you are looking for might just be a transitioning or former military officer. I have never been a Product Manager, but I have spent the last eight years as an officer in the United States Army, I’ve had the pleasure of working with some amazing peers and the honor of leading, coaching and mentoring some very promising young lieutenants.","tags":["Military","Product Management"],"title":"Why a military officer should be your Product Manager"},{"content":"Michael Cata’s wrote a smart article discussing the Department of Defense is reacting to changing events with agility. He thinks we have a good start in the Army Operating Concept. In good units the Army already operates as an agile and learning organization. When lead by astute and prudent leaders it can very closely resemble an organization applying the Scrum Methodology.\nBrigades are built out of agile teams. The Scrum process defines development teams as having a few defining features:\n Self organizing Cross functional No sub-teams Accountability belongs to the entire team Composed of 3–9 people That list almost perfectly describes the basic unit of work in the Army, the fire team. A fire team is is generally four to six Soldiers lead by a team chief. While a fire team generally refers to an infantry organization, the structure remains generally the same at the team level at the bottom of any organizational chart in the Army.  Every organization larger than a fire team is a collection of Agile teams. You can see the complete set of Scrum roles as the organization scales to size, with individuals sometimes filling multiple rolls on different teams.\nArmy teams are collections of Agile/Scrum teams. A staff officer will simultaneously serve as product owner for his section and work as a contributing member of the battalion staff to integrate the results of his team’s work. This aligns closely with the Scaled Agile Framework (http://www.scaledagileframework.com/)\nEmpirical Process Control is baked into Army systems  Scrum is founded on empirical process control theory, or empiricism. Empiricism asserts that knowledge comes from experience and making decisions based on what is known. Scrum employs an iterative, incremental approach to optimize predictability and control risk. Three pillars uphold every implementation of empirical process control: transparency, inspection, and adaptation.\n Transparency Transparency in Scrum relies on a common language for process and a shared vision of what “done” means for all tasks. These are things the Army does particularly well, with common processes and routines shared across the organization. Much of the Army’s ability to organize in to modular brigades is based on the fact that standardized staff processes and expectations allow for a entire organizations to be plugged into higher headquarters and be able to operate.\nShared vision in Army operations is created through an order’s production and distribution process including collaborative development through warning orders, the military decision making process and request for information between echelons, as well as rehearsals and to confirm shared understanding inside of and between teams.\nThe basic method of assigning work in the Army is to give a subordinate a Task (what to do) and Purpose (and why to do it). An agile organization opens an order from higher, reads their specified tasks and has an immediate set of additions to their product backlog.\nInspection Inspection is ensuring the work should be constantly assessed to determine if it meets the definition of success. The Army believes this deeply and has it ingrained in its training methods. Every training event starts and ends with the task, condition and standard. If at the end of training Soldiers have not achieved the the standard (definition of done) than more training is lined up to correct the deficiency. This process is aided by nearly continual After Action Reviews (AARs) following the completion of almost every event the Army does from, your morning PT session to major combat operations and training iterations at the National Training Center at the Brigade Level.\nAdaptation Adaptation is essential in combat organizations to survive and succeed. Examples abound in the past 12 years of conflict of Soldiers continuously adapting to changes in techniques of insurgents. The fight against IEDs described by Cata is a great example, and much of the JIEDDO success is built from aggregating and learning from a broad spectrum of adaptations across the engaged force.\nIn combat, you are facing a smart constantly adapting enemy. If you don’t or can’t adapt faster than they do, you will eventually loose the war or battle. A great example of this is the Rhino, an IED defeat device. Facing an increasing use of infrared light triggers, individual units started looking for a mechanism to keep them safe. A unit motor pool created the first prototype of the Rhino; a heating element in a metal box extended on a pole ahead of a combat vehicle. The hot box tripped the infrared IED triggers ahead of a vehicle rather then with the engine block drove in front of the sensor. The innovation was successful and was quickly picked up across U.S. and coalition forces in Iraq and Afghanistan.\nModular = Self Organizing On of the virtues of the Army’s Modular Concept, originally called Force XXI in 1994, is that organizations are be enabled and empowered to self organize and re-organize to meet the needs of any situation. As described by the Army’s history of the transformation:\n Within that context, it discussed two approaches. Under the first, organizations would be composed of “functionally emulative increments,” elements [sic] that each contained the complete functions of the organization. These would be interchangeable and expandable so that commanders could tailor them to meet changing conditions. This approach would apply mainly to service support organizations at echelons above division and to those components that were expected to contribute elements early in an operation before the entire force deployed. The second approach, labeled “modular designed units,” would craft organizations from discrete elements with different capabilities that in combination [sic] would produce a functional military unit. Applicable to combat, service, and service support units, the concept would allow subelements detached from a parent unit to be assigned to a contingency force for an indefinite period. This would make the Army more responsive than in the past by allowing it to tailor ground forces to fit specific requirements.This agility to reorganize provides commanders with the doctrinal breathing room to tailor organizations to their needs and the demands of the environment. For example during my deployment to Afghanistan with 3/2 Stryker Brigade Combat Team, 1–14 Cavalry Squadron. By the time we set foot in Afghanistan the unit was barely recognizable when compared to the doctrinal Stryker Cavalry Squadron. One reconnaissance troop was detached to an Australian command, a second had been swapped with a sister Infantry battalion for one of their rifle company’s, and most of the assets of the squadron’s surveillance troop had been pulled to the brigade headquarters. To boot, the whole organization was without their namesake Stryker Combat Vehicles.\n Leaders at every level were forced to adapt to this change in environment and organization. One of the biggest challenges to adapt to was fitting a cavalry organization into a wide area security mission in an area the size of Connecticut. A doctrinal Cavalry Squadron is the eyes and ears of the infantry brigade.\n The squadron’s fundamental role is to conduct reconnaissance or security missions in support of its higher headquarters (HQ). The squadron progressively builds situational awareness (SA) of the operational environment (OE) for the higher commander. The combat information provided by the squadron enables the higher commander to develop situational understanding (SU), create better and quicker plans and decisions, and visualize and direct operations. The squadron employs unique combinations of reconnaissance and security capabilities to successfully meet the information challenges intrinsic to the spectrum of conflict. The squadron’s reconnaissance operations yield an extraordinarily high-payoff in the areas of threat location, disposition, composition, early warning, protection, and battle damage assessment (BDA).As a result, the organization is designed to have small teams of Soldiers who can move quickly ahead of larger formations while reaming concealed from the enemy while they observe and report. Unfortunately, it is not an organization with significant fire power, lacking the heavy mortars and machine guns of an infantry formation. To correct these imbalances the commander chose to task organize the formation to give each troop/company a combination of fire power and reconnaissance capabilities. The cavalry troop and infantry company traded a platoon enhancing the capabilities of each organization and giving them the ability to accomplish missions independently.\n Task organization is the Army’s version of self organizing teams, allowing commanders to combine the right set of skills for the task at hand.\nProcess and Events Managing an organization with this much flexibility and so many teams requires a defined process or routine. In Afghanistan 1–14 CAV did this through constantly revising our objectives and with a battle rhythm in a series of targeting meetings closely resembling the Scrum events. We operated on a four week targeting cycle similar to a time boxed sprint.\nThe Targeting Working Group served as the Sprint Planning Meeting. Commanders and Staff gathered under the coaching of the lead of the Operations Officer (serving as Scrum Master) defined their objectives, measures of performance and measure of effectiveness, known in Scrum as the “definition of done” as well as a plan on how to accomplish the work.\nDuring the targeting back-brief commanders brief their progress towards an objective and nominated new and updated targets for the next cycle. They are provided an updated intelligence assessment (marketplace) from the intelligence officer, and received guidance directly from the commander (as product owner). This almost exactly mirrors the Scrum Sprint Retrospective.\nThe final piece of the battle rhythm was the twice daily Battle Update Brief by the operations staff reviewing all of the significant events of the day and upcoming patrols and events. Most days this constituted a hand off from day to night shifts but it served as an essential check on progress and deviations from the plans laid out during the targeting meetings and published in targeting cycle orders.\nIn garrison operations Army organizations execute a weekly or bi-weekly training meeting to review the last week’s work and plan what future work needs to be done. Event-based After Action Reviews (AAR) serve as in progress retrospectives and a commander’s pre-PT stand up meeting or post PT breakfast meeting mimic the Daily Scrum.\nCaveats Not all Army organizations do this well. It takes capable and thoughtful leaders to manage any process and agile processes are difficult to master. Without diligent attention to your operations process you can see broad variations in success and agility inside of an organization. Even inside a company you can have good platoons and weaker platoons and company to company varies inside of a battalion.\nAdditionally process in and of itself does not mean you are an agile organization. Targeting cycles, the Military Decision Making Process (MDMP) and Operations Orders can lead to a slippery slope of waterfall planning and top down control if they are not carefully executed.\nOne thing that does not map well to Scrum in an operational unit sanctity of a sprint and the sprint backlog. In Scrum, once the sprint is started objectives should only be changed or the Sprint canceled under very serious conditions. The driving factor for determining the length of a Sprint in Scrum is one to four weeks based on the amount of risk the organization can risk committing to a single project. In combat you can rarely be certain of a plan for that long, but must be able to drop everything and change direction instantly. This is more true in Combined Arms Maneuver then it is in a Wide Area Security or COIN environment.\nConclusions I write all of this to show there is a lot that both Army leaders and corporate America can learn from the agile practices going on. There is different names for processes and artifacts the translation is fairly direct and could rapidly provide for common ground for discussion about best practices.\nThe Army should:\n  Pay attention to industry processes and development in Agile frameworks.\n  Add industry agile practices to the Professional Development Programs for junior officers and NCOs. At the same time industry should:\n  Crack open history books and learn about successful military organizations and their processes and techniques.\n  Hire Soldiers who are already used to working in a scaled agile and adaptive environment, with just a little bit of retraining you can teach them a new language and have them leading and contributing to agile teams. If you are a transitioning officer consider reading up on Scrum and getting certified as a Scrum Master. You already have many of the skills with a slight adjustment in terminology you can have an industry standard certification to demonstrate your knowledge.\n  Resources  www.scrum.org www.scrumguides.org Scrum: The Art of Doing Twice the Work in Half the Time ","permalink":"https://www.nortrup.dev/posts/military/2015-04-30-army-brigades-are-built-on-agile/","summary":"\u003cp\u003eMichael Cata’s wrote a smart \u003ca href=\"https://medium.com/@michaelccata/joint-forces-of-change-fe109acf2885\"\u003earticle\u003c/a\u003e discussing the Department of Defense is reacting to changing events with agility. He thinks we have a good start in the \u003ca href=\"http://www.arcic.army.mil/Concepts/operating.aspx\"\u003eArmy Operating Concept\u003c/a\u003e. In good units the Army already operates as an agile and learning organization. When lead by astute and prudent leaders it can very closely resemble an organization applying the \u003ca href=\"http://www.scrumguides.org\"\u003eScrum Methodology\u003c/a\u003e.\u003c/p\u003e","tags":["Military","Agile"],"title":"Army Brigades are built on agile."},{"content":"I’ve helped plan brigade and battalion level operations in my time as a staff officer and company commander. Lots of staff officers and NCOs standing over a map, drawing symbols on acetate, scribbling notes on paper and into emails and documents. Once the drawing is done one or several staff officers walks away from the table and copies all of the graphics onto power point slides and the Command Post of the Future (CPoF). They also produce the all important narrative for the OPORD/FRAGO/WARNO.\nWhat I’ve never been as much of a fan of is the fact that map overlays are not great at showing the sequence of events. Acetate is great, I love that everyone is standing there and planning visually. I think it is a great tool. I’m not a huge fan of the time it takes to make and distribute the copies but I think for planning and discussing it is great and certainly better than trying to plan on separate computers or PowerPoint or even CPoF (which still tracks me as better for operations tracking then operational planning).\nThe narrative in the OPORD is also an indispensable tool, but it can be hard to read and really grasp the entire flow of events after reading it. They are also really hard to keep consistent. If you make a change in the Scheme of maneuver, did you also update the timeline in coordinating instructions? Or the concept of fires? Annex H? Tasks to subordinate?\nAlso nothing is worse than spending hours writing and polishing a product, then handing it to a company commander who only skips ahead to their specified tasks, ignoring everything else.\nWhat I\u0026rsquo;ve never been as much of a fan of is the fact that map overlays and narratives are not great at showing the sequence of events. The narrative might have all of the exacting detail required to execute, but it is a wall of words, and hard to digest. You end up spending a lot of time flipping between the narative and the map, or multiple map overlays trying to see the flow.\nWhat I propose is to borrow the Sequence diagram from the Unified Modeling Language (UML). UML is a modeling and diagraming standard originally designed for software programing and application design.\n Modeling is an Essential Part of large software projects, and helpful to medium and even small projects as well. A model plays the analogous role in software development that blueprints and other plans (site maps, elevations, physical models) play in the building of a skyscraper. Using a model, those responsible for a software development project’s success can assure themselves that business functionality is complete and correct, end-user needs are met, and program design supports requirements for scalability, robustness, security, extendibility, and other characteristics,before implementation in code renders changes difficult and expensive to make. (UML.org)Replace “software project” with “military operations” in the above quote and you can easily nest that set of tools into the following from FM 5–0:\n  The Army design methodology is a methodology for applying critical and creative thinking to understand, visualize, and describe unfamiliar problems and approaches to solving them. Army design methodology is an iterative process of understanding and problem framing that uses elements of operational art to conceive and construct an operational approach to solve identified problems. Commanders and their staffs use Army design methodology to assist them with the conceptual aspects of planning.Here is a hypothetical sequence diagram for a troop level operation to seize an objective. It is simplistic but it is a demonstration.\n The down and dirty on notations:\n Each of your entities are listed across the top of the diagram, this could be any independently operating entity on the battlefield. Units (A Troop), resources (Humanitarian Aid), key personnel (commander, CSM, S3). Each entity has a dashed line running vertically below it termed the life line. The life line extends for as long as the entity is alive. If the entity ceases to exist stop the life line and put an X at the bottom. Examples of this would be when your air support goes off station, or you have expended all of a particular resource like mines. Draw arrows between your life lines to show messages being passed between entities, such as giving orders or providing a status update. Messages are passed in sequence from top to bottom on the diagram. A solid line with a solid arrow is a synchronous message, meaning that the caller is going to wait for the recipient to respond before taking further action. A sold line with an open arrow is an asynchronous message, meaning that the caller is not going to wait for the recipient to respond before taking its next action. Dashed lines are response messages which could be notification of task completion, a reconnaissance report, a LACE report. Blocks over a life line show that the entity is currently busy. So if a platoon is ordered to conduct an assault, the platoon’s life line should be blocked until they have seized the objective. Entities can send messages to themselves if you want to show what a unit is doing internally to complete a higher unit’s order. The advantage is that you end up with a quick visual guide to the sequence of operations as planned. A great companion to the operations overlay and allow a leaders to see the whole event.  There are probably a few disadvantages as well. More than likely they include:\n Do you need another MDMP product? If you feels it adds value to your operation go for it. The great thing about UML is that you only need to use the artifacts that help you design. But I recognize that now keeping your operational graphics, narrative, timeline, and coordinating instructions is a huge pain. They can become very wide, which can make them a little unwieldy to print. The diagram doesn’t have a great mechanism for dealing with branch or contingency plans. If you really need to deal with serious branches, start a second diagram.  ","permalink":"https://www.nortrup.dev/posts/military/2015-04-05-sequence-diagrams-and-better-operations-planning/","summary":"I’ve helped plan brigade and battalion level operations in my time as a staff officer and company commander. Lots of staff officers and NCOs standing over a map, drawing symbols on acetate, scribbling notes on paper and into emails and documents. Once the drawing is done one or several staff officers walks away from the table and copies all of the graphics onto power point slides and the Command Post of the Future (CPoF).","tags":["Military"],"title":"Sequence Diagrams and better operations planning."},{"content":"Director Product Management - Tanium February 2020 - Present\n Lead Tanium Platform Services product development and strategy of five services bringing them from zero-to-one and supporting the development of new products including Tanium Risk and modernization of eight other modules Took Tanium API Gateway from zero-to-one; onboarding major partners including SalesForce and Forescout and one large financial customer using it for a for a major software delivery solution Supported the Chief Product Officer in the development and execution of durable product strategy and product vision across four major portfolios driving migration to a SaaS offering and expansion into mid-market customers Drove development and sustainment of Tanium Connect integrating with major partners including IBM Security and Compliance Cloud Collaborated to adopt cloud native infrastructure adoption across multiple modules providing database, storage and caching – helping to transition Tanium from an on premises to cloud deployed product Executed a major UX overhaul for Tanium Connect and Reputation supporting a whole product UI update  Senior Product Manager - Splunk February 2016 - February 2020\n Senior Platform Product Manager for Splunk Cloud Services from product inception to limited availability release. Coordinated efforts for five engineering teams in multiple states, enabling user identity, authentication and authorization, tenant orchestration, API Gateway, provisioning and storage, and integrations Supported the launch of two ground-breaking Splunk SaaS applications Splunk Investigate and Splunk MIssion Control by providing platform services and application lifecycle support Set the course for Splunk Enterprise’s 8.0’s major platform evolution from Python 2.7 to Python 3.7 by defining the key transition milestones and identifying legacy features for removal Grew Splunk Cloud’s serviceable addressable market by $23 Million with the design and engineering of Splunk Dynamic Data - Self Storage, enabling long term retention at drastically lower prices Powered $123 million in FY2018 revenue by leading three teams in the development of backend automation and management infrastructure for Splunk Cloud Increased Splunk developer efficiency with Splunk AppInspect, the authoritative tool for static and dynamic analysis of Splunk apps and add-ons, enabling developers to validate the quality and correctness of their applications for release and deployment, the cornerstone of self-service app installation for Splunk Cloud and Splunk’s application marketplace Reduced the backlog of customer requests for app installations for Splunk Cloud from 190 to less than 10, reducing average wait time from more than three months to less than a week Integrated AppInspect into Splunk’s app development continuous integration system ensuring that all apps published by Splunk are compliant with proven and recommended practices and improving CI/CD practice  Senior Product Manager - U.S. Army February 2008 - January 2016\n Led multiple cross-functional teams of up to 65 soldiers operating $30 million in equipment providing data, voice, satellite, and radio communications for the executive leadership of a 4,500 soldier combat brigade Maintained superior 99% uptime in a mobile internet service provider during a four-week combat simulation Doubled the size of the fiber network and installed the first small data center in Afghanistan, supporting the addition of two large and five small headquarters; increased network speed by 200% and reliability by 70% Coordinated the preparation, inspection, and shipment of 114 containers and vehicles from Germany to 15 sites in Iraq with zero equipment loss, the unit was awarded the Department of the Army Deployment Excellence Award Supervised a 14 person maintenance team responsible for the upkeep of 17 communication systems, 60 vehicles, and 37 generators, a 99% operational rate earned the Army Maintenance Excellence Award for Iraq  Education  Master of Software Engineering - Penn State University - August 2016 BS Applied Networking and Systems Administration - Rochester Institute of Technology - May 2007  Contact me andy@nortrup.dev\n","permalink":"https://www.nortrup.dev/resume/","summary":"Director Product Management - Tanium February 2020 - Present\n Lead Tanium Platform Services product development and strategy of five services bringing them from zero-to-one and supporting the development of new products including Tanium Risk and modernization of eight other modules Took Tanium API Gateway from zero-to-one; onboarding major partners including SalesForce and Forescout and one large financial customer using it for a for a major software delivery solution Supported the Chief Product Officer in the development and execution of durable product strategy and product vision across four major portfolios driving migration to a SaaS offering and expansion into mid-market customers Drove development and sustainment of Tanium Connect integrating with major partners including IBM Security and Compliance Cloud Collaborated to adopt cloud native infrastructure adoption across multiple modules providing database, storage and caching – helping to transition Tanium from an on premises to cloud deployed product Executed a major UX overhaul for Tanium Connect and Reputation supporting a whole product UI update  Senior Product Manager - Splunk February 2016 - February 2020","tags":null,"title":"About"}]